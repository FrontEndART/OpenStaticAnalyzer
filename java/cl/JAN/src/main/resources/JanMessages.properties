# Checker.java
warn.jan.Checker.duplicatedTypeDecl=Duplicated TypeDeclaration nodes with binary name '{}' ({}):
warn.jan.Checker.printTypeDecl=\t{}
warn.jan.Checker.missingParent={} doesn't have a parent.
warn.jan.Checker.missingName={} doesn't have a name.
warn.jan.Checker.missingQualifiedName={} doesn't have a qualified name.
warn.jan.Checker.missingRefersTo={} don't have a refersTo edge.
warn.jan.Checker.missingIsCompUnit={} don't have an isInCompilationUnit edge.
warn.jan.Checker.missingBound={} don't have any bound.
warn.jan.Checker.nonCompGenNodeHasCompGenParent={} non compiler generated node has compiler generated parent ({}).
warn.jan.Checker.missingPos={} node has missing position(s).
warn.jan.Checker.missingConstructor={} don't have a constructor.
warn.jan.Checker.missingTarget={} don't have a target.
warn.jan.Checker.missingInvokes={} don't have invokes edge.
warn.jan.Checker.missingType={} don't have a type.
warn.jan.Checker.missingOwner={} don't have an owner
warn.jan.Checker.missingRawType={} don't have raw type.
warn.jan.Checker.missingArgType={} don't have any argument type.
warn.jan.Checker.sizeIsZero={} size is 0.
warn.jan.Checker.missingCompType={} component type is null.
warn.jan.Checker.missingRetType={} don't have return type.
warn.jan.Checker.missingAlternative={} don't have any alternative.
warn.jan.Checker.missingAnnotation={} don't have any annotation.
warn.jan.Checker.missingUnderlyingType={} doesn't have an underlying type.
warn.jan.Checker.missingReferredMethod={} doesn't have a referred method.
warn.jan.Checker.missingTarget={} doesn't have a target.
warn.jan.Checker.missingQualifierExpr={} doesn't have a qualifier expression.
warn.jan.Checker.missingBody={} doesn't have a body.

# ClassSaver.java
error.jan.ClassSaver.missingDirectoryOfExtraAsg=The directory of the extra asg was not specified so the extra jsi will not be saved.
debug.jan.classSaver.savingFile=Saving file: {}
info.jan.classSaver.savingFileTimestamp=Saved file timestamp: {}

# CommentBuilder.java
ex.jan.CommentBuilder.unknownCommentStyle=Unknown comment style: {}

# ConfigReader.java
ex.jan.ConfigReader.cantFindOption=Can't find option {} in {} file, {} section.
warn.jan.ConfigReader.optionHasMultipleValue=The {} option in {} section has more than one value.
error.jan.ConfigReader.configReaderEx=Error in config reader.
debug.jan.ConfigReader.optionDontHaveValue=The {} option in {} section  don't have a value
ex.jan.ConfigReader.cantFindSection=Can't find section {}.
error.jan.ConfigReader.readingEx=Error reading section.

# CrossEdges.java
debug.jan.CrossEdges.setMethodInvsTarget=Set methodInvs target:
debug.jan.CrossEdges.setNewClassConstr=Set newclass's constructor:
debug.jan.CrossEdges.setMemberRef=Set member reference:
debug.jan.CrossEdges.setIdsTarget=Set ids target:
debug.jan.CrossEdges.setJumpsTarget=Set jumps target:
debug.jan.CrossEdges.setOverrideEdges=Set override edges:
debug.jan.CrossEdges.methodInfo=method : {}.{}
debug.jan.CrossEdges.setOverrideEdge=\  override: {}.{}
debug.jan.CrossEdges.overridenMethodNotBuilded={} - The method '{}.{}' is not built
debug.jan.CrossEdges.refSymError=Null symbol, or 0 id can't be in a referenceMap: {} {}
error.jan.CrossEdges.notHandledCrossEdgeType=Not handled cross edge type.
error.jan.CrossEdges.errorInCrossEdges=Error in cross edges.
debug.jan.CrossEdges.cantFindTheEndOfCrossedge=Can't find the end of the crossEdge at node: {}
debug.jan.CrossEdges.wrongTypeOfSymbol=Wrong type of symbol: {}

# ExternalClassBuilder.java
info.jan.ExternalClassBuilder.firstRound=First round in external class builder
info.jan.ExternalClassBuilder.nextRound=Next round in external class builder
ex.jan.ExternalClassBuilder.errorCreatingOwnerOfTypeDecl=Error while creating owner of a type declaration.
debug.jan.ExternalClassBuilder.symbolTypeIsError=Symbol's type is ERROR, skipping it: {}
debug.jan.ExternalClassBuilder.unexpectedVarSym=unexpected VarSymbol kind: {}
debug.jan.ExternalClassBuilder.unknownVarSym=unknown VarSymbol kind.
debug.jan.ExternalClassBuilder.notHandledSymKind=Not handled symbol kind: {}
debug.jan.ExternalClassBuilder.dontBuildBuiltinSymbol=Don't build class from builtin symbol: {}
error.jan.ExternalClassBuilder.errorVisitingSym=Error while visiting a symbol.
error.jan.ExternalClassBuilder.errorVisitingTypeParam=Error while visiting a type parameter.
info.jan.ExternalClassBuilder.fillExtTypeDecl=Fill external type declaration: {}
info.jan.ExternalClassBuilder.buildingExtTypeDecl=Building external type declaration: {}
error.jan.ExternalClassBuilder.errorCreatingClass=Error while creating a class.
error.jan.ExternalClassBuilder.errorVisitingAnnot=Error while visiting an annotation.
debug.jan.ExternalClassBuilder.unexpectedListSize=Unexpected list size: {}
debug.jan.ExternalClassBuilder.notHandledAnnotElemValue=Not handled annotation element value ({},{})
error.jan.ExternalClassBuilder.errorCreatingAnnotElem=Error while creating an annotation element.
debug.jan.ExternalClassBuilder.notHandledType=Not handled type: {} : {}
error.jan.ExternalClassBuilder.errorVisitingType=Error while visiting a type.
error.jan.ExternalClassBuilder.errorVisitinTypeExpr=Error while visiting an external type expression.
ex.jan.ExternalClassBuilder.symCantBeNull=Sym can't be null
ex.jan.ExternalClassBuilder.incorrectClassSymKind=Incorrect ClassSymbol kind.
ex.jan.ExternalClassBuilder.typeCantBeNull=Type can't be null

# FileCollector.java
error.jan.FileCollector.fileListWritingErr=Error while writing the source file list.
error.jan.FileCollector.fileOrDirDoesNotExist=Input file or directory does not exist: {}
error.jan.FileCollector.couldntDetermineCanonicalPath=Couldn't determine canonical path of {}. Absolute path will be used instead.

# Filter.java
error.jan.Filter.badHardFilter=Error in parsing hard filter file.
debug.jan.Filter.skippingFileByHardFilter=Skipping file by hard filter: {}

# JANFlags.java
warn.jan.JANFlags.modifierIsntHandled={} modifier isn't handled.

# JDKTreeMaker.java
info.jan.CompilerLogger.compilerMessage={}
info.jan.JDKTreeMaker.defaultFileEncoding=Using platform default file encoding: {}
error.jan.JDKTreeMaker.cantCreateCharSet=Can't create Charset from the given name: {}
info.jan.JDKTreeMaker.javacOptions=Javac options:
info.jan.JDKTreeMaker.javacOption=\  {}
error.jan.JDKTreeMaker.javacParseError=Error during javac parse.
error.jan.JDKTreeMaker.javacAnalyzeError=Error during javac analyze.
error.jan.JDKTreeMaker.IOErrorWhileGuessEncoding=IO error occoured, while guess the encoding with CharsetDetector.

# Main.java
info.jan.Main.janInfo=JAN (build {}#{})
error.jan.Main.determineLocationOfExecutableEx=Exception while determining the location of the executable
error.jan.Main.inputMustBeGiven=You must add inputs to analyze with the -i option, or in the javac argument file
warn.jan.Main.allInputFiltered=All input files are filtered by hard filter
info.jan.Main.buildTrees=Build trees.
error.jan.Main.JDKTreeMakerEx=Exception at JDKTreeMaker
info.jan.Main.rebuildTrees=Rebuild trees.
error.jan.Main.TreeBuilderEx=Exception at TreeBuilder
info.jan.Main.buildComments=Build comments.
error.jan.Main.commentBuilderEx=Exception at CommentBuilder
info.jan.Main.createExtClasses=Create external classes.
error.jan.Main.extClassBuildEx=Exception at ExternalClassBuilder
info.jan.Main.setCrossEdges=Set crossedges.
error.jan.Main.crossEdgeEx=Exception at CrossEdges
info.jan.Main.buildTypes=Build types.
error.jan.Main.typeBuilderEx=Exception at TypeBuilder
info.jan.Main.CheckAsg=Check ASG.
info.jan.Main.filter=Filter.
error.jan.Main.filterEx=Exception at Filter
info.jan.Main.saveJsi=Save jsi.
info.jan.Main.saveJml=Save jml.
info.jan.Main.saveJsiByClasses=Save jsi by classes.
info.jan.Main.cpuTimes=CPU times (s):
info.jan.Main.userTimes=User times (s):
info.jan.Main.otherStatistics=Other statistics:
info.jan.Main.analyzedFiles=\  Analyzed files: {}
info.jan.Main.numOfWarnings=\  Warnings: {}
info.jan.Main.numOfErrors=\  Errors: {}
debug.jan.Main.usedMemory=Memory usage (used/total): {} / {} MB
info.jan.Main.memoryStatistics=Memory statistics:
info.jan.Main.maxTotalMemory=\  Max total memory: {} MB
info.jan.Main.maxUsedMemory=\  Max used memory: {} MB
error.jan.Main.cliFactError={}
error.jan.Main.cannotParseArgs=Cannot parse arguments.
error.jan.Main.cannotProcessCmdArgs=Cannot process cmd line args.
error.jan.Main.savingStatisticsEx=IOException while saving statistics
info.jan.Main.statTotalTime=Total time
info.jan.Main.statJDKCompileTime=JDK compile time
info.jan.Main.statTreeRebuildingTime=Tree rebuilding time
info.jan.Main.statCommentBuilding=Comment building time
info.jan.Main.statExternalClassBuildingTime=External class building time
info.jan.Main.statCrossedgeSettingTime=Crossedge setting time
info.jan.Main.statTypeBuildingTime=Type building time
info.jan.Main.statASGCheckingTime=ASG checking time
info.jan.Main.statFilterGeneratingTime=Filter generating time
info.jan.Main.statCommonJsiSavingTime=Common jsi saving time
info.jan.Main.statCommonJmlSavingTime=Common jml saving time
info.jan.Main.statSmallJsiSavingTime=Small jsi saving time

# OptionParser.java
info.jan.OptionParser.javacOptionFound=Javac's {} option is found: {}
info.jan.OptionParser.setLogLevel=Switch the log level to {}.
warn.jan.OptionParser.badLogLevel=Log level {} is out of range, set it to 3.
warn.jan.OptionParser.noConfigFile=There is no config file near the JAN.jar.
error.jan.OptionParser.configParseError=Error occurred while parsing the config file.
warn.jan.OptionParser.overrideValuesFromConfigFile=The JAN option values from the cmd line override the value from the config file.
error.jan.OptionParser.cantOpenArgFile=Can't open argument file: {}
warn.jan.OptionParser.overrideValuesFromArgFile=The javac options from the cmd line override the value from the argument file.
warn.jan.OptionParser.overrideValuesFromTheListFile=The javac option values from the cmd line override the value from the list file.
info.jan.OptionParser.janOptions=JAN options:
info.jan.OptionParser.janOption=\  {}
ex.jan.OptionParser.unexpectedOptionType=Unexpected option type.
error.jan.OptionParser.errorParsingJANArgs=Error while parsing JAN argument: {}
error.jan.OptionParser.cpListWriteError=Error while writing the cp list file.
error.jan.OptionParser.removedUndocumentedTargetOption=The target option has been removed in JDK 8: {}
error.jan.OptionParser.unsupportedSourceOption=Source option {} is no longer supported
error.jan.OptionParser.unsupportedTargetOption=Target option {} is no longer supported

# SymbolMaps.java
debug.jan.SymbolMaps.notExpectedIdType=Not expected id type: {}

# TreeBuilder.java
info.jan.TreeBuilder.sourceFile=Source file: {}
debug.jan.TreeBuilder.typeDeclSymIsNull=TypeDeclaration's symbol is null ({})
debug.jan.TreeBuilder.unexpectedEnumConstInitType={} in enum constant init.
debug.jan.TreeBuilder.otherJCUnaryKind=JCUnary kind: OTHER at expression: {}
debug.jan.TreeBuilder.jcFieldAccesSymWasNull=JCFieldAcces: {} sym was null
debug.jan.TreeBuilder.unexpectedMethKind=methodinvocation.meth is not MEMBER_SELECT or IDENTIFIER
debug.jan.TreeBuilder.exprDontHaveAType={} dont have a type.
debug.jan.TreeBuilder.unknownPrimitiveTypeKind=Unknown PrimitiveTypeKind: {}
debug.jan.TreeBuilder.anonymClassDontHaveSuperClass=Anonym class dont have a super class: {}
ex.jan.TreeBuilder.notHandledPackageMember=Not handled package member: {}
ex.jan.TreeBuilder.visitJCTreeGetANullNode=The visit(JCTree) get a null node.
ex.jan.TreeBuilder.invalidJCTreeKind=invalid jcTreeKind {}
ex.jan.TreeBuilder.visitJCTreeRetIsZero=At the end of the visit(JCTree jcTree) the ret variables value is 0.
ex.jan.TreeBuilder.visitStatementGetANullNode=The visit(JCStatement) get a null node.
ex.jan.TreeBuilder.statementIsntHandledInVisitJCExpr={} isn't handled in the visit(JCExpression) method.
ex.jan.TreeBuilder.varTypeIsNotGiven=Variable type is not given.
ex.jan.TreeBuilder.jcStatementIsNotHandled=JCStatement {} not handled yet.
ex.jan.TreeBuilder.atTheEndOfVisitStmtRetIsZero=At the end of the visit(JCStatement jcStatement) the ret variables value is 0.
ex.jan.TreeBuilder.visitExprGetANullNode=The visit(JCExpression) get a null node.
ex.jan.TreeBuilder.invalidOpKind=invalid operator kind {}
ex.jan.TreeBuilder.invalidLiteralKind=invalid literal kind: {}
ex.jan.TreeBuilder.invalidUnaryKind=Invalid JCUnary kind: {}
ex.jan.TreeBuilder.callTheVisitTypeExprMethod=Call the visitTypeExpression(JCExpression) method for the {}
ex.jan.TreeBuilder.jcExprNotHandledYet=JCExpression {} not handled yet.
ex.jan.TreeBuilder.atTheEndOfVisitExprRetIsZero=At the end of the visit(JCExpression jcExpression) the ret variables value is 0.
ex.jan.TreeBuilder.visitExprGetANullNode=The visit(JCExpression) get a null node.
ex.jan.TreeBuilder.invalidWildCardType=invalid wildcard type {}
ex.jan.TreeBuilder.emptyPkgName=Empty name for PackageSymbol {}
ex.jan.TreeBuilder.erroneousInsteadOfTypeExpr=Erroneous node built instead of TypeExpression, because the javac node's kind {} is not one of the TypeExpression kind.
ex.jan.TreeBuilder.erroneousInsteadOfExpr=Erroneous node built instead of Expression, because nodes with {} kind, must be visited with the visitTypeExpression method.
ex.jan.TreeBuilder.kindMustBeCalledWithTheVisitMethod={} kind must be called with the visit method
ex.jan.TreeBuilder.atTheEndOfVisitTypeExprRetIsZero=At the end of the visitTypeExpression(JCTree jcTree) the ret variables value is 0.
ex.jan.TreeBuilder.erroneousInsteadOfJava18Expr=Java 1.8 node kind {} is not yet handled, building Erroneous node instead.
ex.jan.TreeBuilder.erroneousInsteadOfJava18TypeExpr=Java 1.8 node kind {} is not yet handled, building ErroneousTypeExpression node instead.
debug.jan.TreeBuilder.unsupportedJava9Module=Java 9 module declaration is not yet supported.
debug.jan.TreeBuilder.unsupportedJava9TryResource=Java 9 try resource kind {} is not yet supported.

# TypeBuilder.java
debug.jan.TypeBuilder.couldntSetExpTypeToAnother=Couldn't set expression's ({} {}) type to another one (old: {}, new: {})
error.jan.TypeBuilder.unexpectedNodeIdForType=Unexpected node id{} {} for type id{} {} (type: {})
debug.jan.TypeBuilder.unknownType=Unknown type: {}
debug.jan.TypeBuilder.packageCouldntBeFound=Package couldn't be found for PackageType: {}
error.jan.TypeBuilder.typeParamCouldntBeFound=TypeParameter couldn't be found for TypeVar {} (owner: {})
debug.jan.TypeBuilder.refIsntStored={} ref isn't stored
debug.jan.TypeBuilder.otherType=Other type: {}
error.jan.TypeBuilder.nodeTypeWasNull=Node type was null.
error.jan.TypeBuilder.couldntBuildTheType=Couldn't build the type properly: {} {}
ex.jan.TypeBuilder.invalidWildcardType=Invalid Wildcard type
ex.jan.TypeBuilder.unknownTypeKind=Unknown Type kind: {}
ex.jan.TypeBuilder.errorTypeInsteadOfJava18Type=Java 1.8 node kind {} is not yet handled, building ErrorType node instead.

