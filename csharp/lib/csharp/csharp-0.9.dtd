<!ENTITY % Boolean "(true|false)">

<!ENTITY % Project.attributes "
	name CDATA #REQUIRED
	xmlns:base CDATA #FIXED 'columbus_csharp_schema/base'
	xmlns:expression CDATA #FIXED 'columbus_csharp_schema/expression'
	xmlns:statement CDATA #FIXED 'columbus_csharp_schema/statement'
	xmlns:structure CDATA #FIXED 'columbus_csharp_schema/structure'
">

<!ENTITY % base_Base.attributes "
	id CDATA #REQUIRED
	parent CDATA #IMPLIED
">

<!ENTITY % base_Positioned.attributes "
">

<!ENTITY % expression_AnonymousFunctionExpressionSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % expression_AnonymousObjectCreationExpressionSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % expression_LiteralExpressionSyntax.attributes "
	token CDATA #REQUIRED
">

<!ENTITY % expression_SimpleNameSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % statement_ForEachStatementSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % statement_LabeledStatementSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_AccessorDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_AttributeTargetSpecifierSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_BaseTypeDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_ConstructorDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_DelegateDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_DestructorDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_EnumMemberDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_EventDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_ExternAliasDirectiveSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_FromClauseSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_JoinClauseSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_JoinIntoClauseSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_LetClauseSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_MethodDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_ParameterSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_PropertyDeclarationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_QueryContinuationSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_TypeParameterSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % structure_VariableDeclaratorSyntax.attributes "
	identifier CDATA #REQUIRED
">

<!ENTITY % expression_AliasQualifiedNameSyntax.edges "
	AliasQualifiedNameSyntax_Alias?,
	AliasQualifiedNameSyntax_Name?
">

<!ENTITY % expression_AnonymousFunctionExpressionSyntax.edges "
	AnonymousFunctionExpressionSyntax_Body?
">

<!ENTITY % expression_AnonymousMethodExpressionSyntax.edges "
	AnonymousMethodExpressionSyntax_ParameterList?
">

<!ENTITY % expression_AnonymousObjectCreationExpressionSyntax.edges "
	AnonymousObjectCreationExpressionSyntax_Initializers*
">

<!ENTITY % expression_ArrayCreationExpressionSyntax.edges "
	ArrayCreationExpressionSyntax_Initializer?,
	ArrayCreationExpressionSyntax_Type?
">

<!ENTITY % expression_ArrayTypeSyntax.edges "
	ArrayTypeSyntax_ElementType?,
	ArrayTypeSyntax_RankSpecifiers*
">

<!ENTITY % expression_AssignmentExpressionSyntax.edges "
	AssignmentExpressionSyntax_EventAccessorCall?,
	AssignmentExpressionSyntax_Left?,
	AssignmentExpressionSyntax_OverloadedOperatorCall?,
	AssignmentExpressionSyntax_Right?
">

<!ENTITY % expression_AwaitExpressionSyntax.edges "
	AwaitExpressionSyntax_Expression?
">

<!ENTITY % expression_BinaryExpressionSyntax.edges "
	BinaryExpressionSyntax_Left?,
	BinaryExpressionSyntax_OverloadedOperatorCall?,
	BinaryExpressionSyntax_Right?
">

<!ENTITY % expression_CastExpressionSyntax.edges "
	CastExpressionSyntax_ConversionOperatorCall?,
	CastExpressionSyntax_Expression?,
	CastExpressionSyntax_Type?
">

<!ENTITY % expression_CheckedExpressionSyntax.edges "
	CheckedExpressionSyntax_Expression?
">

<!ENTITY % expression_ConditionalAccessExpressionSyntax.edges "
	ConditionalAccessExpressionSyntax_Expression?,
	ConditionalAccessExpressionSyntax_WhenNotNull?
">

<!ENTITY % expression_ConditionalExpressionSyntax.edges "
	ConditionalExpressionSyntax_Condition?,
	ConditionalExpressionSyntax_WhenFalse?,
	ConditionalExpressionSyntax_WhenTrue?
">

<!ENTITY % expression_DefaultExpressionSyntax.edges "
	DefaultExpressionSyntax_Type?
">

<!ENTITY % expression_ElementAccessExpressionSyntax.edges "
	ElementAccessExpressionSyntax_AccessorCall*,
	ElementAccessExpressionSyntax_ArgumentList?,
	ElementAccessExpressionSyntax_Expression?
">

<!ENTITY % expression_ElementBindingExpressionSyntax.edges "
	ElementBindingExpressionSyntax_ArgumentList?
">

<!ENTITY % expression_GenericNameSyntax.edges "
	GenericNameSyntax_TypeArgumentList?
">

<!ENTITY % expression_IdentifierNameSyntax.edges "
	IdentifierNameSyntax_AccessorCall*,
	IdentifierNameSyntax_Declaration?
">

<!ENTITY % expression_ImplicitArrayCreationExpressionSyntax.edges "
	ImplicitArrayCreationExpressionSyntax_Initializer?
">

<!ENTITY % expression_ImplicitElementAccessSyntax.edges "
	ImplicitElementAccessSyntax_ArgumentList?
">

<!ENTITY % expression_InitializerExpressionSyntax.edges "
	InitializerExpressionSyntax_Expressions*
">

<!ENTITY % expression_InterpolatedStringExpressionSyntax.edges "
	InterpolatedStringExpressionSyntax_Contents*
">

<!ENTITY % expression_InvocationExpressionSyntax.edges "
	InvocationExpressionSyntax_ArgumentList?,
	InvocationExpressionSyntax_Expression?,
	InvocationExpressionSyntax_MethodCall?
">

<!ENTITY % expression_MakeRefExpressionSyntax.edges "
	MakeRefExpressionSyntax_Expression?
">

<!ENTITY % expression_MemberAccessExpressionSyntax.edges "
	MemberAccessExpressionSyntax_Expression?,
	MemberAccessExpressionSyntax_Name?
">

<!ENTITY % expression_MemberBindingExpressionSyntax.edges "
	MemberBindingExpressionSyntax_Name?
">

<!ENTITY % expression_NullableTypeSyntax.edges "
	NullableTypeSyntax_ElementType?
">

<!ENTITY % expression_ObjectCreationExpressionSyntax.edges "
	ObjectCreationExpressionSyntax_ArgumentList?,
	ObjectCreationExpressionSyntax_ConstructorCall?,
	ObjectCreationExpressionSyntax_Initializer?,
	ObjectCreationExpressionSyntax_Type?
">

<!ENTITY % expression_ParenthesizedExpressionSyntax.edges "
	ParenthesizedExpressionSyntax_Expression?
">

<!ENTITY % expression_ParenthesizedLambdaExpressionSyntax.edges "
	ParenthesizedLambdaExpressionSyntax_ParameterList?
">

<!ENTITY % expression_PointerTypeSyntax.edges "
	PointerTypeSyntax_ElementType?
">

<!ENTITY % expression_PostfixUnaryExpressionSyntax.edges "
	PostfixUnaryExpressionSyntax_Operand?,
	PostfixUnaryExpressionSyntax_OverloadedOperatorCall?
">

<!ENTITY % expression_PrefixUnaryExpressionSyntax.edges "
	PrefixUnaryExpressionSyntax_Operand?,
	PrefixUnaryExpressionSyntax_OverloadedOperatorCall?
">

<!ENTITY % expression_QualifiedNameSyntax.edges "
	QualifiedNameSyntax_Left?,
	QualifiedNameSyntax_Right?
">

<!ENTITY % expression_QueryExpressionSyntax.edges "
	QueryExpressionSyntax_Body?,
	QueryExpressionSyntax_FromClause?
">

<!ENTITY % expression_RefTypeExpressionSyntax.edges "
	RefTypeExpressionSyntax_Expression?
">

<!ENTITY % expression_RefValueExpressionSyntax.edges "
	RefValueExpressionSyntax_Expression?,
	RefValueExpressionSyntax_Type?
">

<!ENTITY % expression_SimpleLambdaExpressionSyntax.edges "
	SimpleLambdaExpressionSyntax_Parameter?
">

<!ENTITY % expression_SizeOfExpressionSyntax.edges "
	SizeOfExpressionSyntax_Type?
">

<!ENTITY % expression_StackAllocArrayCreationExpressionSyntax.edges "
	StackAllocArrayCreationExpressionSyntax_Type?
">

<!ENTITY % expression_TypeOfExpressionSyntax.edges "
	TypeOfExpressionSyntax_Type?
">

<!ENTITY % expression_TypeSyntax.edges "
	TypeSyntax_OriginalDefinition?
">

<!ENTITY % statement_BlockSyntax.edges "
	BlockSyntax_Statements*
">

<!ENTITY % statement_CheckedStatementSyntax.edges "
	CheckedStatementSyntax_Block?
">

<!ENTITY % statement_DoStatementSyntax.edges "
	DoStatementSyntax_Condition?,
	DoStatementSyntax_Statement?
">

<!ENTITY % statement_ExpressionStatementSyntax.edges "
	ExpressionStatementSyntax_Expression?
">

<!ENTITY % statement_FixedStatementSyntax.edges "
	FixedStatementSyntax_Declaration?,
	FixedStatementSyntax_Statement?
">

<!ENTITY % statement_ForEachStatementSyntax.edges "
	ForEachStatementSyntax_Expression?,
	ForEachStatementSyntax_Statement?,
	ForEachStatementSyntax_Type?
">

<!ENTITY % statement_ForStatementSyntax.edges "
	ForStatementSyntax_Condition?,
	ForStatementSyntax_Declaration?,
	ForStatementSyntax_Incrementors*,
	ForStatementSyntax_Initializers*,
	ForStatementSyntax_Statement?
">

<!ENTITY % statement_GotoStatementSyntax.edges "
	GotoStatementSyntax_Expression?
">

<!ENTITY % statement_IfStatementSyntax.edges "
	IfStatementSyntax_Condition?,
	IfStatementSyntax_Else?,
	IfStatementSyntax_Statement?
">

<!ENTITY % statement_LabeledStatementSyntax.edges "
	LabeledStatementSyntax_Statement?
">

<!ENTITY % statement_LocalDeclarationStatementSyntax.edges "
	LocalDeclarationStatementSyntax_Declaration?
">

<!ENTITY % statement_LockStatementSyntax.edges "
	LockStatementSyntax_Expression?,
	LockStatementSyntax_Statement?
">

<!ENTITY % statement_ReturnStatementSyntax.edges "
	ReturnStatementSyntax_Expression?
">

<!ENTITY % statement_SwitchStatementSyntax.edges "
	SwitchStatementSyntax_Expression?,
	SwitchStatementSyntax_Sections*
">

<!ENTITY % statement_ThrowStatementSyntax.edges "
	ThrowStatementSyntax_Expression?
">

<!ENTITY % statement_TryStatementSyntax.edges "
	TryStatementSyntax_Block?,
	TryStatementSyntax_Catches*,
	TryStatementSyntax_Finally?
">

<!ENTITY % statement_UnsafeStatementSyntax.edges "
	UnsafeStatementSyntax_Block?
">

<!ENTITY % statement_UsingStatementSyntax.edges "
	UsingStatementSyntax_Declaration?,
	UsingStatementSyntax_Expression?,
	UsingStatementSyntax_Statement?
">

<!ENTITY % statement_WhileStatementSyntax.edges "
	WhileStatementSyntax_Condition?,
	WhileStatementSyntax_Statement?
">

<!ENTITY % statement_YieldStatementSyntax.edges "
	YieldStatementSyntax_Expression?
">

<!ENTITY % structure_AccessorDeclarationSyntax.edges "
	AccessorDeclarationSyntax_AttributeLists*,
	AccessorDeclarationSyntax_Body?
">

<!ENTITY % structure_AccessorListSyntax.edges "
	AccessorListSyntax_Accessors*
">

<!ENTITY % structure_AnonymousObjectMemberDeclaratorSyntax.edges "
	AnonymousObjectMemberDeclaratorSyntax_Expression?,
	AnonymousObjectMemberDeclaratorSyntax_NameEquals?
">

<!ENTITY % structure_ArgumentSyntax.edges "
	ArgumentSyntax_Expression?,
	ArgumentSyntax_NameColon?
">

<!ENTITY % structure_ArrayRankSpecifierSyntax.edges "
	ArrayRankSpecifierSyntax_Sizes*
">

<!ENTITY % structure_ArrowExpressionClauseSyntax.edges "
	ArrowExpressionClauseSyntax_Expression?
">

<!ENTITY % structure_AttributeArgumentListSyntax.edges "
	AttributeArgumentListSyntax_Arguments*
">

<!ENTITY % structure_AttributeArgumentSyntax.edges "
	AttributeArgumentSyntax_Expression?,
	AttributeArgumentSyntax_NameColon?,
	AttributeArgumentSyntax_NameEquals?
">

<!ENTITY % structure_AttributeListSyntax.edges "
	AttributeListSyntax_Attributes*,
	AttributeListSyntax_Target?
">

<!ENTITY % structure_AttributeSyntax.edges "
	AttributeSyntax_ArgumentList?,
	AttributeSyntax_Name?
">

<!ENTITY % structure_BaseArgumentListSyntax.edges "
	BaseArgumentListSyntax_Arguments*
">

<!ENTITY % structure_BaseCrefParameterListSyntax.edges "
	BaseCrefParameterListSyntax_Parameters*
">

<!ENTITY % structure_BaseFieldDeclarationSyntax.edges "
	BaseFieldDeclarationSyntax_AttributeLists*,
	BaseFieldDeclarationSyntax_Declaration?
">

<!ENTITY % structure_BaseListSyntax.edges "
	BaseListSyntax_Types*
">

<!ENTITY % structure_BaseMethodDeclarationSyntax.edges "
	BaseMethodDeclarationSyntax_AccessedEnumMembers*,
	BaseMethodDeclarationSyntax_AttributeLists*,
	BaseMethodDeclarationSyntax_Body?,
	BaseMethodDeclarationSyntax_ParameterList?
">

<!ENTITY % structure_BaseParameterListSyntax.edges "
	BaseParameterListSyntax_Parameters*
">

<!ENTITY % structure_BasePropertyDeclarationSyntax.edges "
	BasePropertyDeclarationSyntax_AccessorList?,
	BasePropertyDeclarationSyntax_AttributeLists*,
	BasePropertyDeclarationSyntax_ExplicitInterfaceSpecifier?,
	BasePropertyDeclarationSyntax_Type?
">

<!ENTITY % structure_BaseTypeDeclarationSyntax.edges "
	BaseTypeDeclarationSyntax_AttributeLists*,
	BaseTypeDeclarationSyntax_BaseList?
">

<!ENTITY % structure_BaseTypeSyntax.edges "
	BaseTypeSyntax_Type?
">

<!ENTITY % structure_CaseSwitchLabelSyntax.edges "
	CaseSwitchLabelSyntax_Value?
">

<!ENTITY % structure_CatchClauseSyntax.edges "
	CatchClauseSyntax_Block?,
	CatchClauseSyntax_Declaration?,
	CatchClauseSyntax_Filter?
">

<!ENTITY % structure_CatchDeclarationSyntax.edges "
	CatchDeclarationSyntax_Type?
">

<!ENTITY % structure_CatchFilterClauseSyntax.edges "
	CatchFilterClauseSyntax_FilterExpression?
">

<!ENTITY % structure_CompilationUnitSyntax.edges "
	CompilationUnitSyntax_AttributeLists*,
	CompilationUnitSyntax_Externs*,
	CompilationUnitSyntax_Members*,
	CompilationUnitSyntax_Usings*
">

<!ENTITY % structure_ConstructorDeclarationSyntax.edges "
	ConstructorDeclarationSyntax_Initializer?
">

<!ENTITY % structure_ConstructorInitializerSyntax.edges "
	ConstructorInitializerSyntax_ArgumentList?,
	ConstructorInitializerSyntax_ConstructorCall?
">

<!ENTITY % structure_ConversionOperatorDeclarationSyntax.edges "
	ConversionOperatorDeclarationSyntax_ExpressionBody?,
	ConversionOperatorDeclarationSyntax_Type?
">

<!ENTITY % structure_ConversionOperatorMemberCrefSyntax.edges "
	ConversionOperatorMemberCrefSyntax_Parameters?,
	ConversionOperatorMemberCrefSyntax_Type?
">

<!ENTITY % structure_CrefParameterSyntax.edges "
	CrefParameterSyntax_Type?
">

<!ENTITY % structure_DelegateDeclarationSyntax.edges "
	DelegateDeclarationSyntax_AttributeLists*,
	DelegateDeclarationSyntax_ConstraintClauses*,
	DelegateDeclarationSyntax_ParameterList?,
	DelegateDeclarationSyntax_ReturnType?
">

<!ENTITY % structure_ElseClauseSyntax.edges "
	ElseClauseSyntax_Statement?
">

<!ENTITY % structure_EnumDeclarationSyntax.edges "
	EnumDeclarationSyntax_Members*
">

<!ENTITY % structure_EnumMemberDeclarationSyntax.edges "
	EnumMemberDeclarationSyntax_AttributeLists*,
	EnumMemberDeclarationSyntax_EqualsValue?
">

<!ENTITY % structure_EqualsValueClauseSyntax.edges "
	EqualsValueClauseSyntax_Value?
">

<!ENTITY % structure_ExplicitInterfaceSpecifierSyntax.edges "
	ExplicitInterfaceSpecifierSyntax_Name?
">

<!ENTITY % structure_FinallyClauseSyntax.edges "
	FinallyClauseSyntax_Block?
">

<!ENTITY % structure_FromClauseSyntax.edges "
	FromClauseSyntax_Expression?,
	FromClauseSyntax_Type?
">

<!ENTITY % structure_GlobalStatementSyntax.edges "
	GlobalStatementSyntax_Statement?
">

<!ENTITY % structure_GroupClauseSyntax.edges "
	GroupClauseSyntax_ByExpression?,
	GroupClauseSyntax_GroupExpression?
">

<!ENTITY % structure_IncompleteMemberSyntax.edges "
	IncompleteMemberSyntax_AttributeLists*,
	IncompleteMemberSyntax_Type?
">

<!ENTITY % structure_IndexerDeclarationSyntax.edges "
	IndexerDeclarationSyntax_ExpressionBody?,
	IndexerDeclarationSyntax_ParameterList?
">

<!ENTITY % structure_IndexerMemberCrefSyntax.edges "
	IndexerMemberCrefSyntax_Parameters?
">

<!ENTITY % structure_InterpolationAlignmentClauseSyntax.edges "
	InterpolationAlignmentClauseSyntax_Value?
">

<!ENTITY % structure_InterpolationSyntax.edges "
	InterpolationSyntax_AlignmentClause?,
	InterpolationSyntax_Expression?,
	InterpolationSyntax_FormatClause?
">

<!ENTITY % structure_JoinClauseSyntax.edges "
	JoinClauseSyntax_InExpression?,
	JoinClauseSyntax_Into?,
	JoinClauseSyntax_LeftExpression?,
	JoinClauseSyntax_RightExpression?,
	JoinClauseSyntax_Type?
">

<!ENTITY % structure_LetClauseSyntax.edges "
	LetClauseSyntax_Expression?
">

<!ENTITY % structure_MethodDeclarationSyntax.edges "
	MethodDeclarationSyntax_ConstraintClauses*,
	MethodDeclarationSyntax_ExplicitInterfaceSpecifier?,
	MethodDeclarationSyntax_ExpressionBody?,
	MethodDeclarationSyntax_ReturnType?
">

<!ENTITY % structure_NameColonSyntax.edges "
	NameColonSyntax_Name?
">

<!ENTITY % structure_NameEqualsSyntax.edges "
	NameEqualsSyntax_Name?
">

<!ENTITY % structure_NameMemberCrefSyntax.edges "
	NameMemberCrefSyntax_Name?,
	NameMemberCrefSyntax_Parameters?
">

<!ENTITY % structure_NamespaceDeclarationSyntax.edges "
	NamespaceDeclarationSyntax_Externs*,
	NamespaceDeclarationSyntax_Members*,
	NamespaceDeclarationSyntax_Name?,
	NamespaceDeclarationSyntax_Usings*
">

<!ENTITY % structure_OperatorDeclarationSyntax.edges "
	OperatorDeclarationSyntax_ExpressionBody?,
	OperatorDeclarationSyntax_ReturnType?
">

<!ENTITY % structure_OperatorMemberCrefSyntax.edges "
	OperatorMemberCrefSyntax_Parameters?
">

<!ENTITY % structure_OrderByClauseSyntax.edges "
	OrderByClauseSyntax_Orderings*
">

<!ENTITY % structure_OrderingSyntax.edges "
	OrderingSyntax_Expression?
">

<!ENTITY % structure_ParameterSyntax.edges "
	ParameterSyntax_AttributeLists*,
	ParameterSyntax_Default?,
	ParameterSyntax_Type?
">

<!ENTITY % structure_PropertyDeclarationSyntax.edges "
	PropertyDeclarationSyntax_ExpressionBody?,
	PropertyDeclarationSyntax_Initializer?
">

<!ENTITY % structure_QualifiedCrefSyntax.edges "
	QualifiedCrefSyntax_Container?,
	QualifiedCrefSyntax_Member?
">

<!ENTITY % structure_QueryBodySyntax.edges "
	QueryBodySyntax_Clauses*,
	QueryBodySyntax_Continuation?,
	QueryBodySyntax_SelectOrGroup?
">

<!ENTITY % structure_QueryContinuationSyntax.edges "
	QueryContinuationSyntax_Body?
">

<!ENTITY % structure_SelectClauseSyntax.edges "
	SelectClauseSyntax_Expression?
">

<!ENTITY % structure_SwitchSectionSyntax.edges "
	SwitchSectionSyntax_Labels*,
	SwitchSectionSyntax_Statements*
">

<!ENTITY % structure_TypeArgumentListSyntax.edges "
	TypeArgumentListSyntax_Arguments*
">

<!ENTITY % structure_TypeConstraintSyntax.edges "
	TypeConstraintSyntax_Type?
">

<!ENTITY % structure_TypeCrefSyntax.edges "
	TypeCrefSyntax_Type?
">

<!ENTITY % structure_TypeDeclarationSyntax.edges "
	TypeDeclarationSyntax_ConstraintClauses*,
	TypeDeclarationSyntax_Members*,
	TypeDeclarationSyntax_TypeParameterList?
">

<!ENTITY % structure_TypeParameterConstraintClauseSyntax.edges "
	TypeParameterConstraintClauseSyntax_Constraints*,
	TypeParameterConstraintClauseSyntax_Name?
">

<!ENTITY % structure_TypeParameterListSyntax.edges "
	TypeParameterListSyntax_Parameters*
">

<!ENTITY % structure_TypeParameterSyntax.edges "
	TypeParameterSyntax_AttributeLists*
">

<!ENTITY % structure_UsingDirectiveSyntax.edges "
	UsingDirectiveSyntax_Alias?,
	UsingDirectiveSyntax_Name?
">

<!ENTITY % structure_VariableDeclarationSyntax.edges "
	VariableDeclarationSyntax_Type?,
	VariableDeclarationSyntax_Variables*
">

<!ENTITY % structure_VariableDeclaratorSyntax.edges "
	VariableDeclaratorSyntax_ArgumentList?,
	VariableDeclaratorSyntax_Initializer?
">

<!ENTITY % structure_WhereClauseSyntax.edges "
	WhereClauseSyntax_Condition?
">

<!ENTITY % structure_XmlAttributeSyntax.edges "
	XmlAttributeSyntax_Name?
">

<!ENTITY % structure_XmlCrefAttributeSyntax.edges "
	XmlCrefAttributeSyntax_Cref?
">

<!ENTITY % structure_XmlElementEndTagSyntax.edges "
	XmlElementEndTagSyntax_Name?
">

<!ENTITY % structure_XmlElementStartTagSyntax.edges "
	XmlElementStartTagSyntax_Attributes*,
	XmlElementStartTagSyntax_Name?
">

<!ENTITY % structure_XmlElementSyntax.edges "
	XmlElementSyntax_Content*,
	XmlElementSyntax_EndTag?,
	XmlElementSyntax_StartTag?
">

<!ENTITY % structure_XmlEmptyElementSyntax.edges "
	XmlEmptyElementSyntax_Attributes*,
	XmlEmptyElementSyntax_Name?
">

<!ENTITY % structure_XmlNameAttributeSyntax.edges "
	XmlNameAttributeSyntax_Identifier?
">

<!ENTITY % structure_XmlNameSyntax.edges "
	XmlNameSyntax_Prefix?
">

<!ENTITY % structure_XmlProcessingInstructionSyntax.edges "
	XmlProcessingInstructionSyntax_Name?
">

<!ENTITY % base_Positioned.Composite "
	SourcePosition
">

<!ENTITY % expression_LambdaExpressionSyntax.descendants "
	expression:ParenthesizedLambdaExpressionSyntax|
	expression:SimpleLambdaExpressionSyntax
">

<!ENTITY % expression_AnonymousFunctionExpressionSyntax.descendants "
	expression:AnonymousMethodExpressionSyntax|
	(%expression_LambdaExpressionSyntax.descendants;)
">

<!ENTITY % expression_InstanceExpressionSyntax.descendants "
	expression:BaseExpressionSyntax|
	expression:ThisExpressionSyntax
">

<!ENTITY % expression_SimpleNameSyntax.descendants "
	expression:GenericNameSyntax|
	expression:IdentifierNameSyntax
">

<!ENTITY % expression_NameSyntax.descendants "
	expression:AliasQualifiedNameSyntax|
	expression:QualifiedNameSyntax|
	(%expression_SimpleNameSyntax.descendants;)
">

<!ENTITY % expression_TypeSyntax.descendants "
	expression:ArrayTypeSyntax|
	(%expression_NameSyntax.descendants;)|
	expression:NullableTypeSyntax|
	expression:OmittedTypeArgumentSyntax|
	expression:PointerTypeSyntax|
	expression:PredefinedTypeSyntax
">

<!ENTITY % expression_ExpressionSyntax.descendants "
	(%expression_AnonymousFunctionExpressionSyntax.descendants;)|
	expression:AnonymousObjectCreationExpressionSyntax|
	expression:ArrayCreationExpressionSyntax|
	expression:AssignmentExpressionSyntax|
	expression:AwaitExpressionSyntax|
	expression:BinaryExpressionSyntax|
	expression:CastExpressionSyntax|
	expression:CheckedExpressionSyntax|
	expression:ConditionalAccessExpressionSyntax|
	expression:ConditionalExpressionSyntax|
	expression:DefaultExpressionSyntax|
	expression:ElementAccessExpressionSyntax|
	expression:ElementBindingExpressionSyntax|
	expression:ImplicitArrayCreationExpressionSyntax|
	expression:ImplicitElementAccessSyntax|
	expression:InitializerExpressionSyntax|
	(%expression_InstanceExpressionSyntax.descendants;)|
	expression:InterpolatedStringExpressionSyntax|
	expression:InvocationExpressionSyntax|
	expression:LiteralExpressionSyntax|
	expression:MakeRefExpressionSyntax|
	expression:MemberAccessExpressionSyntax|
	expression:MemberBindingExpressionSyntax|
	expression:ObjectCreationExpressionSyntax|
	expression:OmittedArraySizeExpressionSyntax|
	expression:ParenthesizedExpressionSyntax|
	expression:PostfixUnaryExpressionSyntax|
	expression:PrefixUnaryExpressionSyntax|
	expression:QueryExpressionSyntax|
	expression:RefTypeExpressionSyntax|
	expression:RefValueExpressionSyntax|
	expression:SizeOfExpressionSyntax|
	expression:StackAllocArrayCreationExpressionSyntax|
	expression:TypeOfExpressionSyntax|
	(%expression_TypeSyntax.descendants;)
">

<!ENTITY % statement_StatementSyntax.descendants "
	statement:BlockSyntax|
	statement:BreakStatementSyntax|
	statement:CheckedStatementSyntax|
	statement:ContinueStatementSyntax|
	statement:DoStatementSyntax|
	statement:EmptyStatementSyntax|
	statement:ExpressionStatementSyntax|
	statement:FixedStatementSyntax|
	statement:ForEachStatementSyntax|
	statement:ForStatementSyntax|
	statement:GotoStatementSyntax|
	statement:IfStatementSyntax|
	statement:LabeledStatementSyntax|
	statement:LocalDeclarationStatementSyntax|
	statement:LockStatementSyntax|
	statement:ReturnStatementSyntax|
	statement:SwitchStatementSyntax|
	statement:ThrowStatementSyntax|
	statement:TryStatementSyntax|
	statement:UnsafeStatementSyntax|
	statement:UsingStatementSyntax|
	statement:WhileStatementSyntax|
	statement:YieldStatementSyntax
">

<!ENTITY % structure_BaseArgumentListSyntax.descendants "
	structure:ArgumentListSyntax|
	structure:BracketedArgumentListSyntax
">

<!ENTITY % structure_BaseCrefParameterListSyntax.descendants "
	structure:CrefBracketedParameterListSyntax|
	structure:CrefParameterListSyntax
">

<!ENTITY % structure_BaseParameterListSyntax.descendants "
	structure:BracketedParameterListSyntax|
	structure:ParameterListSyntax
">

<!ENTITY % structure_BaseTypeSyntax.descendants "
	structure:SimpleBaseTypeSyntax
">

<!ENTITY % structure_MemberCrefSyntax.descendants "
	structure:ConversionOperatorMemberCrefSyntax|
	structure:IndexerMemberCrefSyntax|
	structure:NameMemberCrefSyntax|
	structure:OperatorMemberCrefSyntax
">

<!ENTITY % structure_CrefSyntax.descendants "
	(%structure_MemberCrefSyntax.descendants;)|
	structure:QualifiedCrefSyntax|
	structure:TypeCrefSyntax
">

<!ENTITY % structure_InterpolatedStringContentSyntax.descendants "
	structure:InterpolatedStringTextSyntax|
	structure:InterpolationSyntax
">

<!ENTITY % structure_BaseFieldDeclarationSyntax.descendants "
	structure:EventFieldDeclarationSyntax|
	structure:FieldDeclarationSyntax
">

<!ENTITY % structure_BaseMethodDeclarationSyntax.descendants "
	structure:ConstructorDeclarationSyntax|
	structure:ConversionOperatorDeclarationSyntax|
	structure:DestructorDeclarationSyntax|
	structure:MethodDeclarationSyntax|
	structure:OperatorDeclarationSyntax
">

<!ENTITY % structure_BasePropertyDeclarationSyntax.descendants "
	structure:EventDeclarationSyntax|
	structure:IndexerDeclarationSyntax|
	structure:PropertyDeclarationSyntax
">

<!ENTITY % structure_TypeDeclarationSyntax.descendants "
	structure:ClassDeclarationSyntax|
	structure:InterfaceDeclarationSyntax|
	structure:StructDeclarationSyntax
">

<!ENTITY % structure_BaseTypeDeclarationSyntax.descendants "
	structure:EnumDeclarationSyntax|
	(%structure_TypeDeclarationSyntax.descendants;)
">

<!ENTITY % structure_MemberDeclarationSyntax.descendants "
	(%structure_BaseFieldDeclarationSyntax.descendants;)|
	(%structure_BaseMethodDeclarationSyntax.descendants;)|
	(%structure_BasePropertyDeclarationSyntax.descendants;)|
	(%structure_BaseTypeDeclarationSyntax.descendants;)|
	structure:DelegateDeclarationSyntax|
	structure:EnumMemberDeclarationSyntax|
	structure:GlobalStatementSyntax|
	structure:IncompleteMemberSyntax|
	structure:NamespaceDeclarationSyntax
">

<!ENTITY % structure_QueryClauseSyntax.descendants "
	structure:FromClauseSyntax|
	structure:JoinClauseSyntax|
	structure:LetClauseSyntax|
	structure:OrderByClauseSyntax|
	structure:WhereClauseSyntax
">

<!ENTITY % structure_SelectOrGroupClauseSyntax.descendants "
	structure:GroupClauseSyntax|
	structure:SelectClauseSyntax
">

<!ENTITY % structure_SwitchLabelSyntax.descendants "
	structure:CaseSwitchLabelSyntax|
	structure:DefaultSwitchLabelSyntax
">

<!ENTITY % structure_TypeParameterConstraintSyntax.descendants "
	structure:ClassOrStructConstraintSyntax|
	structure:ConstructorConstraintSyntax|
	structure:TypeConstraintSyntax
">

<!ENTITY % structure_XmlAttributeSyntax.descendants "
	structure:XmlCrefAttributeSyntax|
	structure:XmlNameAttributeSyntax|
	structure:XmlTextAttributeSyntax
">

<!ENTITY % structure_XmlNodeSyntax.descendants "
	structure:XmlCDataSectionSyntax|
	structure:XmlCommentSyntax|
	structure:XmlElementSyntax|
	structure:XmlEmptyElementSyntax|
	structure:XmlProcessingInstructionSyntax|
	structure:XmlTextSyntax
">

<!ENTITY % base_Positioned.descendants "
	(%expression_ExpressionSyntax.descendants;)|
	(%statement_StatementSyntax.descendants;)|
	structure:AccessorDeclarationSyntax|
	structure:AccessorListSyntax|
	structure:AnonymousObjectMemberDeclaratorSyntax|
	structure:ArgumentSyntax|
	structure:ArrayRankSpecifierSyntax|
	structure:ArrowExpressionClauseSyntax|
	structure:AttributeArgumentListSyntax|
	structure:AttributeArgumentSyntax|
	structure:AttributeListSyntax|
	structure:AttributeSyntax|
	structure:AttributeTargetSpecifierSyntax|
	(%structure_BaseArgumentListSyntax.descendants;)|
	(%structure_BaseCrefParameterListSyntax.descendants;)|
	structure:BaseListSyntax|
	(%structure_BaseParameterListSyntax.descendants;)|
	(%structure_BaseTypeSyntax.descendants;)|
	structure:CatchClauseSyntax|
	structure:CatchDeclarationSyntax|
	structure:CatchFilterClauseSyntax|
	structure:CompilationUnitSyntax|
	structure:ConstructorInitializerSyntax|
	structure:CrefParameterSyntax|
	(%structure_CrefSyntax.descendants;)|
	structure:ElseClauseSyntax|
	structure:EqualsValueClauseSyntax|
	structure:ExplicitInterfaceSpecifierSyntax|
	structure:ExternAliasDirectiveSyntax|
	structure:FinallyClauseSyntax|
	(%structure_InterpolatedStringContentSyntax.descendants;)|
	structure:InterpolationAlignmentClauseSyntax|
	structure:InterpolationFormatClauseSyntax|
	structure:JoinIntoClauseSyntax|
	(%structure_MemberDeclarationSyntax.descendants;)|
	structure:NameColonSyntax|
	structure:NameEqualsSyntax|
	structure:OrderingSyntax|
	structure:ParameterSyntax|
	structure:QueryBodySyntax|
	(%structure_QueryClauseSyntax.descendants;)|
	structure:QueryContinuationSyntax|
	(%structure_SelectOrGroupClauseSyntax.descendants;)|
	(%structure_SwitchLabelSyntax.descendants;)|
	structure:SwitchSectionSyntax|
	structure:SyntaxToken|
	structure:TypeArgumentListSyntax|
	structure:TypeParameterConstraintClauseSyntax|
	(%structure_TypeParameterConstraintSyntax.descendants;)|
	structure:TypeParameterListSyntax|
	structure:TypeParameterSyntax|
	structure:UsingDirectiveSyntax|
	structure:VariableDeclarationSyntax|
	structure:VariableDeclaratorSyntax|
	(%structure_XmlAttributeSyntax.descendants;)|
	structure:XmlElementEndTagSyntax|
	structure:XmlElementStartTagSyntax|
	structure:XmlNameSyntax|
	(%structure_XmlNodeSyntax.descendants;)|
	structure:XmlPrefixSyntax
">

<!ENTITY % base_Base.descendants "
	(%base_Positioned.descendants;)
">

<!ELEMENT Project (
	structure:CompilationUnitSyntax,
	(
		expression:AliasQualifiedNameSyntax|
		expression:AnonymousMethodExpressionSyntax|
		expression:AnonymousObjectCreationExpressionSyntax|
		expression:ArrayCreationExpressionSyntax|
		expression:ArrayTypeSyntax|
		expression:AssignmentExpressionSyntax|
		expression:AwaitExpressionSyntax|
		expression:BaseExpressionSyntax|
		expression:BinaryExpressionSyntax|
		expression:CastExpressionSyntax|
		expression:CheckedExpressionSyntax|
		expression:ConditionalAccessExpressionSyntax|
		expression:ConditionalExpressionSyntax|
		expression:DefaultExpressionSyntax|
		expression:ElementAccessExpressionSyntax|
		expression:ElementBindingExpressionSyntax|
		expression:GenericNameSyntax|
		expression:IdentifierNameSyntax|
		expression:ImplicitArrayCreationExpressionSyntax|
		expression:ImplicitElementAccessSyntax|
		expression:InitializerExpressionSyntax|
		expression:InterpolatedStringExpressionSyntax|
		expression:InvocationExpressionSyntax|
		expression:LiteralExpressionSyntax|
		expression:MakeRefExpressionSyntax|
		expression:MemberAccessExpressionSyntax|
		expression:MemberBindingExpressionSyntax|
		expression:NullableTypeSyntax|
		expression:ObjectCreationExpressionSyntax|
		expression:OmittedArraySizeExpressionSyntax|
		expression:OmittedTypeArgumentSyntax|
		expression:ParenthesizedExpressionSyntax|
		expression:ParenthesizedLambdaExpressionSyntax|
		expression:PointerTypeSyntax|
		expression:PostfixUnaryExpressionSyntax|
		expression:PredefinedTypeSyntax|
		expression:PrefixUnaryExpressionSyntax|
		expression:QualifiedNameSyntax|
		expression:QueryExpressionSyntax|
		expression:RefTypeExpressionSyntax|
		expression:RefValueExpressionSyntax|
		expression:SimpleLambdaExpressionSyntax|
		expression:SizeOfExpressionSyntax|
		expression:StackAllocArrayCreationExpressionSyntax|
		expression:ThisExpressionSyntax|
		expression:TypeOfExpressionSyntax|
		statement:BlockSyntax|
		statement:BreakStatementSyntax|
		statement:CheckedStatementSyntax|
		statement:ContinueStatementSyntax|
		statement:DoStatementSyntax|
		statement:EmptyStatementSyntax|
		statement:ExpressionStatementSyntax|
		statement:FixedStatementSyntax|
		statement:ForEachStatementSyntax|
		statement:ForStatementSyntax|
		statement:GotoStatementSyntax|
		statement:IfStatementSyntax|
		statement:LabeledStatementSyntax|
		statement:LocalDeclarationStatementSyntax|
		statement:LockStatementSyntax|
		statement:ReturnStatementSyntax|
		statement:SwitchStatementSyntax|
		statement:ThrowStatementSyntax|
		statement:TryStatementSyntax|
		statement:UnsafeStatementSyntax|
		statement:UsingStatementSyntax|
		statement:WhileStatementSyntax|
		statement:YieldStatementSyntax|
		structure:AccessorDeclarationSyntax|
		structure:AccessorListSyntax|
		structure:AnonymousObjectMemberDeclaratorSyntax|
		structure:ArgumentListSyntax|
		structure:ArgumentSyntax|
		structure:ArrayRankSpecifierSyntax|
		structure:ArrowExpressionClauseSyntax|
		structure:AttributeArgumentListSyntax|
		structure:AttributeArgumentSyntax|
		structure:AttributeListSyntax|
		structure:AttributeSyntax|
		structure:AttributeTargetSpecifierSyntax|
		structure:BaseListSyntax|
		structure:BracketedArgumentListSyntax|
		structure:BracketedParameterListSyntax|
		structure:CaseSwitchLabelSyntax|
		structure:CatchClauseSyntax|
		structure:CatchDeclarationSyntax|
		structure:CatchFilterClauseSyntax|
		structure:ClassDeclarationSyntax|
		structure:ClassOrStructConstraintSyntax|
		structure:CompilationUnitSyntax|
		structure:ConstructorConstraintSyntax|
		structure:ConstructorDeclarationSyntax|
		structure:ConstructorInitializerSyntax|
		structure:ConversionOperatorDeclarationSyntax|
		structure:ConversionOperatorMemberCrefSyntax|
		structure:CrefBracketedParameterListSyntax|
		structure:CrefParameterListSyntax|
		structure:CrefParameterSyntax|
		structure:DefaultSwitchLabelSyntax|
		structure:DelegateDeclarationSyntax|
		structure:DestructorDeclarationSyntax|
		structure:ElseClauseSyntax|
		structure:EnumDeclarationSyntax|
		structure:EnumMemberDeclarationSyntax|
		structure:EqualsValueClauseSyntax|
		structure:EventDeclarationSyntax|
		structure:EventFieldDeclarationSyntax|
		structure:ExplicitInterfaceSpecifierSyntax|
		structure:ExternAliasDirectiveSyntax|
		structure:FieldDeclarationSyntax|
		structure:FinallyClauseSyntax|
		structure:FromClauseSyntax|
		structure:GlobalStatementSyntax|
		structure:GroupClauseSyntax|
		structure:IncompleteMemberSyntax|
		structure:IndexerDeclarationSyntax|
		structure:IndexerMemberCrefSyntax|
		structure:InterfaceDeclarationSyntax|
		structure:InterpolatedStringTextSyntax|
		structure:InterpolationAlignmentClauseSyntax|
		structure:InterpolationFormatClauseSyntax|
		structure:InterpolationSyntax|
		structure:JoinClauseSyntax|
		structure:JoinIntoClauseSyntax|
		structure:LetClauseSyntax|
		structure:MethodDeclarationSyntax|
		structure:NameColonSyntax|
		structure:NameEqualsSyntax|
		structure:NameMemberCrefSyntax|
		structure:NamespaceDeclarationSyntax|
		structure:OperatorDeclarationSyntax|
		structure:OperatorMemberCrefSyntax|
		structure:OrderByClauseSyntax|
		structure:OrderingSyntax|
		structure:ParameterListSyntax|
		structure:ParameterSyntax|
		structure:PropertyDeclarationSyntax|
		structure:QualifiedCrefSyntax|
		structure:QueryBodySyntax|
		structure:QueryContinuationSyntax|
		structure:SelectClauseSyntax|
		structure:SimpleBaseTypeSyntax|
		structure:StructDeclarationSyntax|
		structure:SwitchSectionSyntax|
		structure:SyntaxToken|
		structure:TypeArgumentListSyntax|
		structure:TypeConstraintSyntax|
		structure:TypeCrefSyntax|
		structure:TypeParameterConstraintClauseSyntax|
		structure:TypeParameterListSyntax|
		structure:TypeParameterSyntax|
		structure:UsingDirectiveSyntax|
		structure:VariableDeclarationSyntax|
		structure:VariableDeclaratorSyntax|
		structure:WhereClauseSyntax|
		structure:XmlCDataSectionSyntax|
		structure:XmlCommentSyntax|
		structure:XmlCrefAttributeSyntax|
		structure:XmlElementEndTagSyntax|
		structure:XmlElementStartTagSyntax|
		structure:XmlElementSyntax|
		structure:XmlEmptyElementSyntax|
		structure:XmlNameAttributeSyntax|
		structure:XmlNameSyntax|
		structure:XmlPrefixSyntax|
		structure:XmlProcessingInstructionSyntax|
		structure:XmlTextAttributeSyntax|
		structure:XmlTextSyntax
	)*,
	Filtered?
)>
<!ATTLIST Project %Project.attributes;>

<!ELEMENT Filtered EMPTY>
<!ATTLIST Filtered id ID #REQUIRED>

<!ELEMENT expression:AliasQualifiedNameSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_AliasQualifiedNameSyntax.edges;
)>
<!ATTLIST expression:AliasQualifiedNameSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:AnonymousMethodExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_AnonymousFunctionExpressionSyntax.edges;,
	%expression_AnonymousMethodExpressionSyntax.edges;
)>
<!ATTLIST expression:AnonymousMethodExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_AnonymousFunctionExpressionSyntax.attributes;
>

<!ELEMENT expression:AnonymousObjectCreationExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_AnonymousObjectCreationExpressionSyntax.edges;
)>
<!ATTLIST expression:AnonymousObjectCreationExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_AnonymousObjectCreationExpressionSyntax.attributes;
>

<!ELEMENT expression:ArrayCreationExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ArrayCreationExpressionSyntax.edges;
)>
<!ATTLIST expression:ArrayCreationExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ArrayTypeSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_ArrayTypeSyntax.edges;
)>
<!ATTLIST expression:ArrayTypeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:AssignmentExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_AssignmentExpressionSyntax.edges;
)>
<!ATTLIST expression:AssignmentExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:AwaitExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_AwaitExpressionSyntax.edges;
)>
<!ATTLIST expression:AwaitExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:BaseExpressionSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST expression:BaseExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:BinaryExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_BinaryExpressionSyntax.edges;
)>
<!ATTLIST expression:BinaryExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:CastExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_CastExpressionSyntax.edges;
)>
<!ATTLIST expression:CastExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:CheckedExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_CheckedExpressionSyntax.edges;
)>
<!ATTLIST expression:CheckedExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ConditionalAccessExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ConditionalAccessExpressionSyntax.edges;
)>
<!ATTLIST expression:ConditionalAccessExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ConditionalExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ConditionalExpressionSyntax.edges;
)>
<!ATTLIST expression:ConditionalExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:DefaultExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_DefaultExpressionSyntax.edges;
)>
<!ATTLIST expression:DefaultExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ElementAccessExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ElementAccessExpressionSyntax.edges;
)>
<!ATTLIST expression:ElementAccessExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ElementBindingExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ElementBindingExpressionSyntax.edges;
)>
<!ATTLIST expression:ElementBindingExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:GenericNameSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_GenericNameSyntax.edges;
)>
<!ATTLIST expression:GenericNameSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_SimpleNameSyntax.attributes;
>

<!ELEMENT expression:IdentifierNameSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_IdentifierNameSyntax.edges;
)>
<!ATTLIST expression:IdentifierNameSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_SimpleNameSyntax.attributes;
>

<!ELEMENT expression:ImplicitArrayCreationExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ImplicitArrayCreationExpressionSyntax.edges;
)>
<!ATTLIST expression:ImplicitArrayCreationExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ImplicitElementAccessSyntax (
	%base_Positioned.Composite;,
	%expression_ImplicitElementAccessSyntax.edges;
)>
<!ATTLIST expression:ImplicitElementAccessSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:InitializerExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_InitializerExpressionSyntax.edges;
)>
<!ATTLIST expression:InitializerExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:InterpolatedStringExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_InterpolatedStringExpressionSyntax.edges;
)>
<!ATTLIST expression:InterpolatedStringExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:InvocationExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_InvocationExpressionSyntax.edges;
)>
<!ATTLIST expression:InvocationExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:LiteralExpressionSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST expression:LiteralExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_LiteralExpressionSyntax.attributes;
>

<!ELEMENT expression:MakeRefExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_MakeRefExpressionSyntax.edges;
)>
<!ATTLIST expression:MakeRefExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:MemberAccessExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_MemberAccessExpressionSyntax.edges;
)>
<!ATTLIST expression:MemberAccessExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:MemberBindingExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_MemberBindingExpressionSyntax.edges;
)>
<!ATTLIST expression:MemberBindingExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:NullableTypeSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_NullableTypeSyntax.edges;
)>
<!ATTLIST expression:NullableTypeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ObjectCreationExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ObjectCreationExpressionSyntax.edges;
)>
<!ATTLIST expression:ObjectCreationExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:OmittedArraySizeExpressionSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST expression:OmittedArraySizeExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:OmittedTypeArgumentSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;
)>
<!ATTLIST expression:OmittedTypeArgumentSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ParenthesizedExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_ParenthesizedExpressionSyntax.edges;
)>
<!ATTLIST expression:ParenthesizedExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ParenthesizedLambdaExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_AnonymousFunctionExpressionSyntax.edges;,
	%expression_ParenthesizedLambdaExpressionSyntax.edges;
)>
<!ATTLIST expression:ParenthesizedLambdaExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_AnonymousFunctionExpressionSyntax.attributes;
>

<!ELEMENT expression:PointerTypeSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_PointerTypeSyntax.edges;
)>
<!ATTLIST expression:PointerTypeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:PostfixUnaryExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_PostfixUnaryExpressionSyntax.edges;
)>
<!ATTLIST expression:PostfixUnaryExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:PredefinedTypeSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;
)>
<!ATTLIST expression:PredefinedTypeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:PrefixUnaryExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_PrefixUnaryExpressionSyntax.edges;
)>
<!ATTLIST expression:PrefixUnaryExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:QualifiedNameSyntax (
	%base_Positioned.Composite;,
	%expression_TypeSyntax.edges;,
	%expression_QualifiedNameSyntax.edges;
)>
<!ATTLIST expression:QualifiedNameSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:QueryExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_QueryExpressionSyntax.edges;
)>
<!ATTLIST expression:QueryExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:RefTypeExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_RefTypeExpressionSyntax.edges;
)>
<!ATTLIST expression:RefTypeExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:RefValueExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_RefValueExpressionSyntax.edges;
)>
<!ATTLIST expression:RefValueExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:SimpleLambdaExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_AnonymousFunctionExpressionSyntax.edges;,
	%expression_SimpleLambdaExpressionSyntax.edges;
)>
<!ATTLIST expression:SimpleLambdaExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%expression_AnonymousFunctionExpressionSyntax.attributes;
>

<!ELEMENT expression:SizeOfExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_SizeOfExpressionSyntax.edges;
)>
<!ATTLIST expression:SizeOfExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:StackAllocArrayCreationExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_StackAllocArrayCreationExpressionSyntax.edges;
)>
<!ATTLIST expression:StackAllocArrayCreationExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:ThisExpressionSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST expression:ThisExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT expression:TypeOfExpressionSyntax (
	%base_Positioned.Composite;,
	%expression_TypeOfExpressionSyntax.edges;
)>
<!ATTLIST expression:TypeOfExpressionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:BlockSyntax (
	%base_Positioned.Composite;,
	%statement_BlockSyntax.edges;
)>
<!ATTLIST statement:BlockSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:BreakStatementSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST statement:BreakStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:CheckedStatementSyntax (
	%base_Positioned.Composite;,
	%statement_CheckedStatementSyntax.edges;
)>
<!ATTLIST statement:CheckedStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:ContinueStatementSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST statement:ContinueStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:DoStatementSyntax (
	%base_Positioned.Composite;,
	%statement_DoStatementSyntax.edges;
)>
<!ATTLIST statement:DoStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:EmptyStatementSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST statement:EmptyStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:ExpressionStatementSyntax (
	%base_Positioned.Composite;,
	%statement_ExpressionStatementSyntax.edges;
)>
<!ATTLIST statement:ExpressionStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:FixedStatementSyntax (
	%base_Positioned.Composite;,
	%statement_FixedStatementSyntax.edges;
)>
<!ATTLIST statement:FixedStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:ForEachStatementSyntax (
	%base_Positioned.Composite;,
	%statement_ForEachStatementSyntax.edges;
)>
<!ATTLIST statement:ForEachStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%statement_ForEachStatementSyntax.attributes;
>

<!ELEMENT statement:ForStatementSyntax (
	%base_Positioned.Composite;,
	%statement_ForStatementSyntax.edges;
)>
<!ATTLIST statement:ForStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:GotoStatementSyntax (
	%base_Positioned.Composite;,
	%statement_GotoStatementSyntax.edges;
)>
<!ATTLIST statement:GotoStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:IfStatementSyntax (
	%base_Positioned.Composite;,
	%statement_IfStatementSyntax.edges;
)>
<!ATTLIST statement:IfStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:LabeledStatementSyntax (
	%base_Positioned.Composite;,
	%statement_LabeledStatementSyntax.edges;
)>
<!ATTLIST statement:LabeledStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%statement_LabeledStatementSyntax.attributes;
>

<!ELEMENT statement:LocalDeclarationStatementSyntax (
	%base_Positioned.Composite;,
	%statement_LocalDeclarationStatementSyntax.edges;
)>
<!ATTLIST statement:LocalDeclarationStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:LockStatementSyntax (
	%base_Positioned.Composite;,
	%statement_LockStatementSyntax.edges;
)>
<!ATTLIST statement:LockStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:ReturnStatementSyntax (
	%base_Positioned.Composite;,
	%statement_ReturnStatementSyntax.edges;
)>
<!ATTLIST statement:ReturnStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:SwitchStatementSyntax (
	%base_Positioned.Composite;,
	%statement_SwitchStatementSyntax.edges;
)>
<!ATTLIST statement:SwitchStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:ThrowStatementSyntax (
	%base_Positioned.Composite;,
	%statement_ThrowStatementSyntax.edges;
)>
<!ATTLIST statement:ThrowStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:TryStatementSyntax (
	%base_Positioned.Composite;,
	%statement_TryStatementSyntax.edges;
)>
<!ATTLIST statement:TryStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:UnsafeStatementSyntax (
	%base_Positioned.Composite;,
	%statement_UnsafeStatementSyntax.edges;
)>
<!ATTLIST statement:UnsafeStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:UsingStatementSyntax (
	%base_Positioned.Composite;,
	%statement_UsingStatementSyntax.edges;
)>
<!ATTLIST statement:UsingStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:WhileStatementSyntax (
	%base_Positioned.Composite;,
	%statement_WhileStatementSyntax.edges;
)>
<!ATTLIST statement:WhileStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT statement:YieldStatementSyntax (
	%base_Positioned.Composite;,
	%statement_YieldStatementSyntax.edges;
)>
<!ATTLIST statement:YieldStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AccessorDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_AccessorDeclarationSyntax.edges;
)>
<!ATTLIST structure:AccessorDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_AccessorDeclarationSyntax.attributes;
>

<!ELEMENT structure:AccessorListSyntax (
	%base_Positioned.Composite;,
	%structure_AccessorListSyntax.edges;
)>
<!ATTLIST structure:AccessorListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AnonymousObjectMemberDeclaratorSyntax (
	%base_Positioned.Composite;,
	%structure_AnonymousObjectMemberDeclaratorSyntax.edges;
)>
<!ATTLIST structure:AnonymousObjectMemberDeclaratorSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ArgumentListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseArgumentListSyntax.edges;
)>
<!ATTLIST structure:ArgumentListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ArgumentSyntax (
	%base_Positioned.Composite;,
	%structure_ArgumentSyntax.edges;
)>
<!ATTLIST structure:ArgumentSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ArrayRankSpecifierSyntax (
	%base_Positioned.Composite;,
	%structure_ArrayRankSpecifierSyntax.edges;
)>
<!ATTLIST structure:ArrayRankSpecifierSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ArrowExpressionClauseSyntax (
	%base_Positioned.Composite;,
	%structure_ArrowExpressionClauseSyntax.edges;
)>
<!ATTLIST structure:ArrowExpressionClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AttributeArgumentListSyntax (
	%base_Positioned.Composite;,
	%structure_AttributeArgumentListSyntax.edges;
)>
<!ATTLIST structure:AttributeArgumentListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AttributeArgumentSyntax (
	%base_Positioned.Composite;,
	%structure_AttributeArgumentSyntax.edges;
)>
<!ATTLIST structure:AttributeArgumentSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AttributeListSyntax (
	%base_Positioned.Composite;,
	%structure_AttributeListSyntax.edges;
)>
<!ATTLIST structure:AttributeListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AttributeSyntax (
	%base_Positioned.Composite;,
	%structure_AttributeSyntax.edges;
)>
<!ATTLIST structure:AttributeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:AttributeTargetSpecifierSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:AttributeTargetSpecifierSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_AttributeTargetSpecifierSyntax.attributes;
>

<!ELEMENT structure:BaseListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseListSyntax.edges;
)>
<!ATTLIST structure:BaseListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:BracketedArgumentListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseArgumentListSyntax.edges;
)>
<!ATTLIST structure:BracketedArgumentListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:BracketedParameterListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseParameterListSyntax.edges;
)>
<!ATTLIST structure:BracketedParameterListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CaseSwitchLabelSyntax (
	%base_Positioned.Composite;,
	%structure_CaseSwitchLabelSyntax.edges;
)>
<!ATTLIST structure:CaseSwitchLabelSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CatchClauseSyntax (
	%base_Positioned.Composite;,
	%structure_CatchClauseSyntax.edges;
)>
<!ATTLIST structure:CatchClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CatchDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_CatchDeclarationSyntax.edges;
)>
<!ATTLIST structure:CatchDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CatchFilterClauseSyntax (
	%base_Positioned.Composite;,
	%structure_CatchFilterClauseSyntax.edges;
)>
<!ATTLIST structure:CatchFilterClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ClassDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseTypeDeclarationSyntax.edges;,
	%structure_TypeDeclarationSyntax.edges;
)>
<!ATTLIST structure:ClassDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_BaseTypeDeclarationSyntax.attributes;
>

<!ELEMENT structure:ClassOrStructConstraintSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:ClassOrStructConstraintSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CompilationUnitSyntax (
	%base_Positioned.Composite;,
	%structure_CompilationUnitSyntax.edges;
)>
<!ATTLIST structure:CompilationUnitSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ConstructorConstraintSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:ConstructorConstraintSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ConstructorDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseMethodDeclarationSyntax.edges;,
	%structure_ConstructorDeclarationSyntax.edges;
)>
<!ATTLIST structure:ConstructorDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_ConstructorDeclarationSyntax.attributes;
>

<!ELEMENT structure:ConstructorInitializerSyntax (
	%base_Positioned.Composite;,
	%structure_ConstructorInitializerSyntax.edges;
)>
<!ATTLIST structure:ConstructorInitializerSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ConversionOperatorDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseMethodDeclarationSyntax.edges;,
	%structure_ConversionOperatorDeclarationSyntax.edges;
)>
<!ATTLIST structure:ConversionOperatorDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ConversionOperatorMemberCrefSyntax (
	%base_Positioned.Composite;,
	%structure_ConversionOperatorMemberCrefSyntax.edges;
)>
<!ATTLIST structure:ConversionOperatorMemberCrefSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CrefBracketedParameterListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseCrefParameterListSyntax.edges;
)>
<!ATTLIST structure:CrefBracketedParameterListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CrefParameterListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseCrefParameterListSyntax.edges;
)>
<!ATTLIST structure:CrefParameterListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:CrefParameterSyntax (
	%base_Positioned.Composite;,
	%structure_CrefParameterSyntax.edges;
)>
<!ATTLIST structure:CrefParameterSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:DefaultSwitchLabelSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:DefaultSwitchLabelSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:DelegateDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_DelegateDeclarationSyntax.edges;
)>
<!ATTLIST structure:DelegateDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_DelegateDeclarationSyntax.attributes;
>

<!ELEMENT structure:DestructorDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseMethodDeclarationSyntax.edges;
)>
<!ATTLIST structure:DestructorDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_DestructorDeclarationSyntax.attributes;
>

<!ELEMENT structure:ElseClauseSyntax (
	%base_Positioned.Composite;,
	%structure_ElseClauseSyntax.edges;
)>
<!ATTLIST structure:ElseClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:EnumDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseTypeDeclarationSyntax.edges;,
	%structure_EnumDeclarationSyntax.edges;
)>
<!ATTLIST structure:EnumDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_BaseTypeDeclarationSyntax.attributes;
>

<!ELEMENT structure:EnumMemberDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_EnumMemberDeclarationSyntax.edges;
)>
<!ATTLIST structure:EnumMemberDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_EnumMemberDeclarationSyntax.attributes;
>

<!ELEMENT structure:EqualsValueClauseSyntax (
	%base_Positioned.Composite;,
	%structure_EqualsValueClauseSyntax.edges;
)>
<!ATTLIST structure:EqualsValueClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:EventDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BasePropertyDeclarationSyntax.edges;
)>
<!ATTLIST structure:EventDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_EventDeclarationSyntax.attributes;
>

<!ELEMENT structure:EventFieldDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseFieldDeclarationSyntax.edges;
)>
<!ATTLIST structure:EventFieldDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ExplicitInterfaceSpecifierSyntax (
	%base_Positioned.Composite;,
	%structure_ExplicitInterfaceSpecifierSyntax.edges;
)>
<!ATTLIST structure:ExplicitInterfaceSpecifierSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ExternAliasDirectiveSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:ExternAliasDirectiveSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_ExternAliasDirectiveSyntax.attributes;
>

<!ELEMENT structure:FieldDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseFieldDeclarationSyntax.edges;
)>
<!ATTLIST structure:FieldDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:FinallyClauseSyntax (
	%base_Positioned.Composite;,
	%structure_FinallyClauseSyntax.edges;
)>
<!ATTLIST structure:FinallyClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:FromClauseSyntax (
	%base_Positioned.Composite;,
	%structure_FromClauseSyntax.edges;
)>
<!ATTLIST structure:FromClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_FromClauseSyntax.attributes;
>

<!ELEMENT structure:GlobalStatementSyntax (
	%base_Positioned.Composite;,
	%structure_GlobalStatementSyntax.edges;
)>
<!ATTLIST structure:GlobalStatementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:GroupClauseSyntax (
	%base_Positioned.Composite;,
	%structure_GroupClauseSyntax.edges;
)>
<!ATTLIST structure:GroupClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:IncompleteMemberSyntax (
	%base_Positioned.Composite;,
	%structure_IncompleteMemberSyntax.edges;
)>
<!ATTLIST structure:IncompleteMemberSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:IndexerDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BasePropertyDeclarationSyntax.edges;,
	%structure_IndexerDeclarationSyntax.edges;
)>
<!ATTLIST structure:IndexerDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:IndexerMemberCrefSyntax (
	%base_Positioned.Composite;,
	%structure_IndexerMemberCrefSyntax.edges;
)>
<!ATTLIST structure:IndexerMemberCrefSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:InterfaceDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseTypeDeclarationSyntax.edges;,
	%structure_TypeDeclarationSyntax.edges;
)>
<!ATTLIST structure:InterfaceDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_BaseTypeDeclarationSyntax.attributes;
>

<!ELEMENT structure:InterpolatedStringTextSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:InterpolatedStringTextSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:InterpolationAlignmentClauseSyntax (
	%base_Positioned.Composite;,
	%structure_InterpolationAlignmentClauseSyntax.edges;
)>
<!ATTLIST structure:InterpolationAlignmentClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:InterpolationFormatClauseSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:InterpolationFormatClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:InterpolationSyntax (
	%base_Positioned.Composite;,
	%structure_InterpolationSyntax.edges;
)>
<!ATTLIST structure:InterpolationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:JoinClauseSyntax (
	%base_Positioned.Composite;,
	%structure_JoinClauseSyntax.edges;
)>
<!ATTLIST structure:JoinClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_JoinClauseSyntax.attributes;
>

<!ELEMENT structure:JoinIntoClauseSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:JoinIntoClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_JoinIntoClauseSyntax.attributes;
>

<!ELEMENT structure:LetClauseSyntax (
	%base_Positioned.Composite;,
	%structure_LetClauseSyntax.edges;
)>
<!ATTLIST structure:LetClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_LetClauseSyntax.attributes;
>

<!ELEMENT structure:MethodDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseMethodDeclarationSyntax.edges;,
	%structure_MethodDeclarationSyntax.edges;
)>
<!ATTLIST structure:MethodDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_MethodDeclarationSyntax.attributes;
>

<!ELEMENT structure:NameColonSyntax (
	%base_Positioned.Composite;,
	%structure_NameColonSyntax.edges;
)>
<!ATTLIST structure:NameColonSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:NameEqualsSyntax (
	%base_Positioned.Composite;,
	%structure_NameEqualsSyntax.edges;
)>
<!ATTLIST structure:NameEqualsSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:NameMemberCrefSyntax (
	%base_Positioned.Composite;,
	%structure_NameMemberCrefSyntax.edges;
)>
<!ATTLIST structure:NameMemberCrefSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:NamespaceDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_NamespaceDeclarationSyntax.edges;
)>
<!ATTLIST structure:NamespaceDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:OperatorDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseMethodDeclarationSyntax.edges;,
	%structure_OperatorDeclarationSyntax.edges;
)>
<!ATTLIST structure:OperatorDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:OperatorMemberCrefSyntax (
	%base_Positioned.Composite;,
	%structure_OperatorMemberCrefSyntax.edges;
)>
<!ATTLIST structure:OperatorMemberCrefSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:OrderByClauseSyntax (
	%base_Positioned.Composite;,
	%structure_OrderByClauseSyntax.edges;
)>
<!ATTLIST structure:OrderByClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:OrderingSyntax (
	%base_Positioned.Composite;,
	%structure_OrderingSyntax.edges;
)>
<!ATTLIST structure:OrderingSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ParameterListSyntax (
	%base_Positioned.Composite;,
	%structure_BaseParameterListSyntax.edges;
)>
<!ATTLIST structure:ParameterListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:ParameterSyntax (
	%base_Positioned.Composite;,
	%structure_ParameterSyntax.edges;
)>
<!ATTLIST structure:ParameterSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_ParameterSyntax.attributes;
>

<!ELEMENT structure:PropertyDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BasePropertyDeclarationSyntax.edges;,
	%structure_PropertyDeclarationSyntax.edges;
)>
<!ATTLIST structure:PropertyDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_PropertyDeclarationSyntax.attributes;
>

<!ELEMENT structure:QualifiedCrefSyntax (
	%base_Positioned.Composite;,
	%structure_QualifiedCrefSyntax.edges;
)>
<!ATTLIST structure:QualifiedCrefSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:QueryBodySyntax (
	%base_Positioned.Composite;,
	%structure_QueryBodySyntax.edges;
)>
<!ATTLIST structure:QueryBodySyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:QueryContinuationSyntax (
	%base_Positioned.Composite;,
	%structure_QueryContinuationSyntax.edges;
)>
<!ATTLIST structure:QueryContinuationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_QueryContinuationSyntax.attributes;
>

<!ELEMENT structure:SelectClauseSyntax (
	%base_Positioned.Composite;,
	%structure_SelectClauseSyntax.edges;
)>
<!ATTLIST structure:SelectClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:SimpleBaseTypeSyntax (
	%base_Positioned.Composite;,
	%structure_BaseTypeSyntax.edges;
)>
<!ATTLIST structure:SimpleBaseTypeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:StructDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_BaseTypeDeclarationSyntax.edges;,
	%structure_TypeDeclarationSyntax.edges;
)>
<!ATTLIST structure:StructDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_BaseTypeDeclarationSyntax.attributes;
>

<!ELEMENT structure:SwitchSectionSyntax (
	%base_Positioned.Composite;,
	%structure_SwitchSectionSyntax.edges;
)>
<!ATTLIST structure:SwitchSectionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:SyntaxToken (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:SyntaxToken
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:TypeArgumentListSyntax (
	%base_Positioned.Composite;,
	%structure_TypeArgumentListSyntax.edges;
)>
<!ATTLIST structure:TypeArgumentListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:TypeConstraintSyntax (
	%base_Positioned.Composite;,
	%structure_TypeConstraintSyntax.edges;
)>
<!ATTLIST structure:TypeConstraintSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:TypeCrefSyntax (
	%base_Positioned.Composite;,
	%structure_TypeCrefSyntax.edges;
)>
<!ATTLIST structure:TypeCrefSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:TypeParameterConstraintClauseSyntax (
	%base_Positioned.Composite;,
	%structure_TypeParameterConstraintClauseSyntax.edges;
)>
<!ATTLIST structure:TypeParameterConstraintClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:TypeParameterListSyntax (
	%base_Positioned.Composite;,
	%structure_TypeParameterListSyntax.edges;
)>
<!ATTLIST structure:TypeParameterListSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:TypeParameterSyntax (
	%base_Positioned.Composite;,
	%structure_TypeParameterSyntax.edges;
)>
<!ATTLIST structure:TypeParameterSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_TypeParameterSyntax.attributes;
>

<!ELEMENT structure:UsingDirectiveSyntax (
	%base_Positioned.Composite;,
	%structure_UsingDirectiveSyntax.edges;
)>
<!ATTLIST structure:UsingDirectiveSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:VariableDeclarationSyntax (
	%base_Positioned.Composite;,
	%structure_VariableDeclarationSyntax.edges;
)>
<!ATTLIST structure:VariableDeclarationSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:VariableDeclaratorSyntax (
	%base_Positioned.Composite;,
	%structure_VariableDeclaratorSyntax.edges;
)>
<!ATTLIST structure:VariableDeclaratorSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
	%structure_VariableDeclaratorSyntax.attributes;
>

<!ELEMENT structure:WhereClauseSyntax (
	%base_Positioned.Composite;,
	%structure_WhereClauseSyntax.edges;
)>
<!ATTLIST structure:WhereClauseSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlCDataSectionSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:XmlCDataSectionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlCommentSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:XmlCommentSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlCrefAttributeSyntax (
	%base_Positioned.Composite;,
	%structure_XmlAttributeSyntax.edges;,
	%structure_XmlCrefAttributeSyntax.edges;
)>
<!ATTLIST structure:XmlCrefAttributeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlElementEndTagSyntax (
	%base_Positioned.Composite;,
	%structure_XmlElementEndTagSyntax.edges;
)>
<!ATTLIST structure:XmlElementEndTagSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlElementStartTagSyntax (
	%base_Positioned.Composite;,
	%structure_XmlElementStartTagSyntax.edges;
)>
<!ATTLIST structure:XmlElementStartTagSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlElementSyntax (
	%base_Positioned.Composite;,
	%structure_XmlElementSyntax.edges;
)>
<!ATTLIST structure:XmlElementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlEmptyElementSyntax (
	%base_Positioned.Composite;,
	%structure_XmlEmptyElementSyntax.edges;
)>
<!ATTLIST structure:XmlEmptyElementSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlNameAttributeSyntax (
	%base_Positioned.Composite;,
	%structure_XmlAttributeSyntax.edges;,
	%structure_XmlNameAttributeSyntax.edges;
)>
<!ATTLIST structure:XmlNameAttributeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlNameSyntax (
	%base_Positioned.Composite;,
	%structure_XmlNameSyntax.edges;
)>
<!ATTLIST structure:XmlNameSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlPrefixSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:XmlPrefixSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlProcessingInstructionSyntax (
	%base_Positioned.Composite;,
	%structure_XmlProcessingInstructionSyntax.edges;
)>
<!ATTLIST structure:XmlProcessingInstructionSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlTextAttributeSyntax (
	%base_Positioned.Composite;,
	%structure_XmlAttributeSyntax.edges;
)>
<!ATTLIST structure:XmlTextAttributeSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT structure:XmlTextSyntax (
	%base_Positioned.Composite;
)>
<!ATTLIST structure:XmlTextSyntax
	%base_Base.attributes;
	%base_Positioned.attributes;
>

<!ELEMENT AliasQualifiedNameSyntax_Alias (
	expression:IdentifierNameSyntax
)>

<!ELEMENT AliasQualifiedNameSyntax_Name (
	(%expression_SimpleNameSyntax.descendants;)
)>

<!ELEMENT AnonymousFunctionExpressionSyntax_Body (
	(%base_Positioned.descendants;)
)>

<!ELEMENT AnonymousMethodExpressionSyntax_ParameterList (
	structure:ParameterListSyntax
)>

<!ELEMENT AnonymousObjectCreationExpressionSyntax_Initializers (
	structure:AnonymousObjectMemberDeclaratorSyntax
)>

<!ELEMENT ArrayCreationExpressionSyntax_Initializer (
	expression:InitializerExpressionSyntax
)>

<!ELEMENT ArrayCreationExpressionSyntax_Type (
	expression:ArrayTypeSyntax
)>

<!ELEMENT ArrayTypeSyntax_ElementType (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ArrayTypeSyntax_RankSpecifiers (
	structure:ArrayRankSpecifierSyntax
)>

<!ELEMENT AssignmentExpressionSyntax_EventAccessorCall EMPTY>
<!ATTLIST AssignmentExpressionSyntax_EventAccessorCall
	ref IDREF #REQUIRED
>

<!ELEMENT AssignmentExpressionSyntax_Left (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT AssignmentExpressionSyntax_OverloadedOperatorCall EMPTY>
<!ATTLIST AssignmentExpressionSyntax_OverloadedOperatorCall
	ref IDREF #REQUIRED
>

<!ELEMENT AssignmentExpressionSyntax_Right (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT AwaitExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT BinaryExpressionSyntax_Left (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT BinaryExpressionSyntax_OverloadedOperatorCall EMPTY>
<!ATTLIST BinaryExpressionSyntax_OverloadedOperatorCall
	ref IDREF #REQUIRED
>

<!ELEMENT BinaryExpressionSyntax_Right (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT CastExpressionSyntax_ConversionOperatorCall EMPTY>
<!ATTLIST CastExpressionSyntax_ConversionOperatorCall
	ref IDREF #REQUIRED
>

<!ELEMENT CastExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT CastExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT CheckedExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ConditionalAccessExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ConditionalAccessExpressionSyntax_WhenNotNull (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ConditionalExpressionSyntax_Condition (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ConditionalExpressionSyntax_WhenFalse (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ConditionalExpressionSyntax_WhenTrue (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT DefaultExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ElementAccessExpressionSyntax_AccessorCall EMPTY>
<!ATTLIST ElementAccessExpressionSyntax_AccessorCall
	ref IDREF #REQUIRED
>

<!ELEMENT ElementAccessExpressionSyntax_ArgumentList (
	structure:BracketedArgumentListSyntax
)>

<!ELEMENT ElementAccessExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ElementBindingExpressionSyntax_ArgumentList (
	structure:BracketedArgumentListSyntax
)>

<!ELEMENT GenericNameSyntax_TypeArgumentList (
	structure:TypeArgumentListSyntax
)>

<!ELEMENT IdentifierNameSyntax_AccessorCall EMPTY>
<!ATTLIST IdentifierNameSyntax_AccessorCall
	ref IDREF #REQUIRED
>

<!ELEMENT IdentifierNameSyntax_Declaration EMPTY>
<!ATTLIST IdentifierNameSyntax_Declaration
	ref IDREF #REQUIRED
>

<!ELEMENT ImplicitArrayCreationExpressionSyntax_Initializer (
	expression:InitializerExpressionSyntax
)>

<!ELEMENT ImplicitElementAccessSyntax_ArgumentList (
	structure:BracketedArgumentListSyntax
)>

<!ELEMENT InitializerExpressionSyntax_Expressions (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT InterpolatedStringExpressionSyntax_Contents (
	(%structure_InterpolatedStringContentSyntax.descendants;)
)>

<!ELEMENT InvocationExpressionSyntax_ArgumentList (
	structure:ArgumentListSyntax
)>

<!ELEMENT InvocationExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT InvocationExpressionSyntax_MethodCall EMPTY>
<!ATTLIST InvocationExpressionSyntax_MethodCall
	ref IDREF #REQUIRED
>

<!ELEMENT MakeRefExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT MemberAccessExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT MemberAccessExpressionSyntax_Name (
	(%expression_SimpleNameSyntax.descendants;)
)>

<!ELEMENT MemberBindingExpressionSyntax_Name (
	(%expression_SimpleNameSyntax.descendants;)
)>

<!ELEMENT NullableTypeSyntax_ElementType (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ObjectCreationExpressionSyntax_ArgumentList (
	structure:ArgumentListSyntax
)>

<!ELEMENT ObjectCreationExpressionSyntax_ConstructorCall EMPTY>
<!ATTLIST ObjectCreationExpressionSyntax_ConstructorCall
	ref IDREF #REQUIRED
>

<!ELEMENT ObjectCreationExpressionSyntax_Initializer (
	expression:InitializerExpressionSyntax
)>

<!ELEMENT ObjectCreationExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ParenthesizedExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ParenthesizedLambdaExpressionSyntax_ParameterList (
	structure:ParameterListSyntax
)>

<!ELEMENT PointerTypeSyntax_ElementType (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT PostfixUnaryExpressionSyntax_Operand (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT PostfixUnaryExpressionSyntax_OverloadedOperatorCall EMPTY>
<!ATTLIST PostfixUnaryExpressionSyntax_OverloadedOperatorCall
	ref IDREF #REQUIRED
>

<!ELEMENT PrefixUnaryExpressionSyntax_Operand (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT PrefixUnaryExpressionSyntax_OverloadedOperatorCall EMPTY>
<!ATTLIST PrefixUnaryExpressionSyntax_OverloadedOperatorCall
	ref IDREF #REQUIRED
>

<!ELEMENT QualifiedNameSyntax_Left (
	(%expression_NameSyntax.descendants;)
)>

<!ELEMENT QualifiedNameSyntax_Right (
	(%expression_SimpleNameSyntax.descendants;)
)>

<!ELEMENT QueryExpressionSyntax_Body (
	structure:QueryBodySyntax
)>

<!ELEMENT QueryExpressionSyntax_FromClause (
	structure:FromClauseSyntax
)>

<!ELEMENT RefTypeExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT RefValueExpressionSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT RefValueExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT SimpleLambdaExpressionSyntax_Parameter (
	structure:ParameterSyntax
)>

<!ELEMENT SizeOfExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT StackAllocArrayCreationExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT TypeOfExpressionSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT TypeSyntax_OriginalDefinition EMPTY>
<!ATTLIST TypeSyntax_OriginalDefinition
	ref IDREF #REQUIRED
>

<!ELEMENT BlockSyntax_Statements (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT CheckedStatementSyntax_Block (
	statement:BlockSyntax
)>

<!ELEMENT DoStatementSyntax_Condition (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT DoStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT ExpressionStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT FixedStatementSyntax_Declaration (
	structure:VariableDeclarationSyntax
)>

<!ELEMENT FixedStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT ForEachStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ForEachStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT ForEachStatementSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ForStatementSyntax_Condition (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ForStatementSyntax_Declaration (
	structure:VariableDeclarationSyntax
)>

<!ELEMENT ForStatementSyntax_Incrementors (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ForStatementSyntax_Initializers (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ForStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT GotoStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT IfStatementSyntax_Condition (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT IfStatementSyntax_Else (
	structure:ElseClauseSyntax
)>

<!ELEMENT IfStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT LabeledStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT LocalDeclarationStatementSyntax_Declaration (
	structure:VariableDeclarationSyntax
)>

<!ELEMENT LockStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT LockStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT ReturnStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT SwitchStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT SwitchStatementSyntax_Sections (
	structure:SwitchSectionSyntax
)>

<!ELEMENT ThrowStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT TryStatementSyntax_Block (
	statement:BlockSyntax
)>

<!ELEMENT TryStatementSyntax_Catches (
	structure:CatchClauseSyntax
)>

<!ELEMENT TryStatementSyntax_Finally (
	structure:FinallyClauseSyntax
)>

<!ELEMENT UnsafeStatementSyntax_Block (
	statement:BlockSyntax
)>

<!ELEMENT UsingStatementSyntax_Declaration (
	structure:VariableDeclarationSyntax
)>

<!ELEMENT UsingStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT UsingStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT WhileStatementSyntax_Condition (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT WhileStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT YieldStatementSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT AccessorDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT AccessorDeclarationSyntax_Body (
	statement:BlockSyntax
)>

<!ELEMENT AccessorListSyntax_Accessors (
	structure:AccessorDeclarationSyntax
)>

<!ELEMENT AnonymousObjectMemberDeclaratorSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT AnonymousObjectMemberDeclaratorSyntax_NameEquals (
	structure:NameEqualsSyntax
)>

<!ELEMENT ArgumentSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ArgumentSyntax_NameColon (
	structure:NameColonSyntax
)>

<!ELEMENT ArrayRankSpecifierSyntax_Sizes (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ArrowExpressionClauseSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT AttributeArgumentListSyntax_Arguments (
	structure:AttributeArgumentSyntax
)>

<!ELEMENT AttributeArgumentSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT AttributeArgumentSyntax_NameColon (
	structure:NameColonSyntax
)>

<!ELEMENT AttributeArgumentSyntax_NameEquals (
	structure:NameEqualsSyntax
)>

<!ELEMENT AttributeListSyntax_Attributes (
	structure:AttributeSyntax
)>

<!ELEMENT AttributeListSyntax_Target (
	structure:AttributeTargetSpecifierSyntax
)>

<!ELEMENT AttributeSyntax_ArgumentList (
	structure:AttributeArgumentListSyntax
)>

<!ELEMENT AttributeSyntax_Name (
	(%expression_NameSyntax.descendants;)
)>

<!ELEMENT BaseArgumentListSyntax_Arguments (
	structure:ArgumentSyntax
)>

<!ELEMENT BaseCrefParameterListSyntax_Parameters (
	structure:CrefParameterSyntax
)>

<!ELEMENT BaseFieldDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT BaseFieldDeclarationSyntax_Declaration (
	structure:VariableDeclarationSyntax
)>

<!ELEMENT BaseListSyntax_Types (
	(%structure_BaseTypeSyntax.descendants;)
)>

<!ELEMENT BaseMethodDeclarationSyntax_AccessedEnumMembers EMPTY>
<!ATTLIST BaseMethodDeclarationSyntax_AccessedEnumMembers
	ref IDREF #REQUIRED
>

<!ELEMENT BaseMethodDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT BaseMethodDeclarationSyntax_Body (
	statement:BlockSyntax
)>

<!ELEMENT BaseMethodDeclarationSyntax_ParameterList (
	structure:ParameterListSyntax
)>

<!ELEMENT BaseParameterListSyntax_Parameters (
	structure:ParameterSyntax
)>

<!ELEMENT BasePropertyDeclarationSyntax_AccessorList (
	structure:AccessorListSyntax
)>

<!ELEMENT BasePropertyDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT BasePropertyDeclarationSyntax_ExplicitInterfaceSpecifier (
	structure:ExplicitInterfaceSpecifierSyntax
)>

<!ELEMENT BasePropertyDeclarationSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT BaseTypeDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT BaseTypeDeclarationSyntax_BaseList (
	structure:BaseListSyntax
)>

<!ELEMENT BaseTypeSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT CaseSwitchLabelSyntax_Value (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT CatchClauseSyntax_Block (
	statement:BlockSyntax
)>

<!ELEMENT CatchClauseSyntax_Declaration (
	structure:CatchDeclarationSyntax
)>

<!ELEMENT CatchClauseSyntax_Filter (
	structure:CatchFilterClauseSyntax
)>

<!ELEMENT CatchDeclarationSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT CatchFilterClauseSyntax_FilterExpression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT CompilationUnitSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT CompilationUnitSyntax_Externs (
	structure:ExternAliasDirectiveSyntax
)>

<!ELEMENT CompilationUnitSyntax_Members (
	(%structure_MemberDeclarationSyntax.descendants;)
)>

<!ELEMENT CompilationUnitSyntax_Usings (
	structure:UsingDirectiveSyntax
)>

<!ELEMENT ConstructorDeclarationSyntax_Initializer (
	structure:ConstructorInitializerSyntax
)>

<!ELEMENT ConstructorInitializerSyntax_ArgumentList (
	structure:ArgumentListSyntax
)>

<!ELEMENT ConstructorInitializerSyntax_ConstructorCall EMPTY>
<!ATTLIST ConstructorInitializerSyntax_ConstructorCall
	ref IDREF #REQUIRED
>

<!ELEMENT ConversionOperatorDeclarationSyntax_ExpressionBody (
	structure:ArrowExpressionClauseSyntax
)>

<!ELEMENT ConversionOperatorDeclarationSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ConversionOperatorMemberCrefSyntax_Parameters (
	structure:CrefParameterListSyntax
)>

<!ELEMENT ConversionOperatorMemberCrefSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT CrefParameterSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT DelegateDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT DelegateDeclarationSyntax_ConstraintClauses (
	structure:TypeParameterConstraintClauseSyntax
)>

<!ELEMENT DelegateDeclarationSyntax_ParameterList (
	structure:ParameterListSyntax
)>

<!ELEMENT DelegateDeclarationSyntax_ReturnType (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT ElseClauseSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT EnumDeclarationSyntax_Members (
	structure:EnumMemberDeclarationSyntax
)>

<!ELEMENT EnumMemberDeclarationSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT EnumMemberDeclarationSyntax_EqualsValue (
	structure:EqualsValueClauseSyntax
)>

<!ELEMENT EqualsValueClauseSyntax_Value (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ExplicitInterfaceSpecifierSyntax_Name (
	(%expression_NameSyntax.descendants;)
)>

<!ELEMENT FinallyClauseSyntax_Block (
	statement:BlockSyntax
)>

<!ELEMENT FromClauseSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT FromClauseSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT GlobalStatementSyntax_Statement (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT GroupClauseSyntax_ByExpression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT GroupClauseSyntax_GroupExpression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT IncompleteMemberSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT IncompleteMemberSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT IndexerDeclarationSyntax_ExpressionBody (
	structure:ArrowExpressionClauseSyntax
)>

<!ELEMENT IndexerDeclarationSyntax_ParameterList (
	structure:BracketedParameterListSyntax
)>

<!ELEMENT IndexerMemberCrefSyntax_Parameters (
	structure:CrefBracketedParameterListSyntax
)>

<!ELEMENT InterpolationAlignmentClauseSyntax_Value (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT InterpolationSyntax_AlignmentClause (
	structure:InterpolationAlignmentClauseSyntax
)>

<!ELEMENT InterpolationSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT InterpolationSyntax_FormatClause (
	structure:InterpolationFormatClauseSyntax
)>

<!ELEMENT JoinClauseSyntax_InExpression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT JoinClauseSyntax_Into (
	structure:JoinIntoClauseSyntax
)>

<!ELEMENT JoinClauseSyntax_LeftExpression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT JoinClauseSyntax_RightExpression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT JoinClauseSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT LetClauseSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT MethodDeclarationSyntax_ConstraintClauses (
	structure:TypeParameterConstraintClauseSyntax
)>

<!ELEMENT MethodDeclarationSyntax_ExplicitInterfaceSpecifier (
	structure:ExplicitInterfaceSpecifierSyntax
)>

<!ELEMENT MethodDeclarationSyntax_ExpressionBody (
	structure:ArrowExpressionClauseSyntax
)>

<!ELEMENT MethodDeclarationSyntax_ReturnType (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT NameColonSyntax_Name (
	expression:IdentifierNameSyntax
)>

<!ELEMENT NameEqualsSyntax_Name (
	expression:IdentifierNameSyntax
)>

<!ELEMENT NameMemberCrefSyntax_Name (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT NameMemberCrefSyntax_Parameters (
	structure:CrefParameterListSyntax
)>

<!ELEMENT NamespaceDeclarationSyntax_Externs (
	structure:ExternAliasDirectiveSyntax
)>

<!ELEMENT NamespaceDeclarationSyntax_Members (
	(%structure_MemberDeclarationSyntax.descendants;)
)>

<!ELEMENT NamespaceDeclarationSyntax_Name (
	(%expression_NameSyntax.descendants;)
)>

<!ELEMENT NamespaceDeclarationSyntax_Usings (
	structure:UsingDirectiveSyntax
)>

<!ELEMENT OperatorDeclarationSyntax_ExpressionBody (
	structure:ArrowExpressionClauseSyntax
)>

<!ELEMENT OperatorDeclarationSyntax_ReturnType (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT OperatorMemberCrefSyntax_Parameters (
	structure:CrefParameterListSyntax
)>

<!ELEMENT OrderByClauseSyntax_Orderings (
	structure:OrderingSyntax
)>

<!ELEMENT OrderingSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT ParameterSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT ParameterSyntax_Default (
	structure:EqualsValueClauseSyntax
)>

<!ELEMENT ParameterSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT PropertyDeclarationSyntax_ExpressionBody (
	structure:ArrowExpressionClauseSyntax
)>

<!ELEMENT PropertyDeclarationSyntax_Initializer (
	structure:EqualsValueClauseSyntax
)>

<!ELEMENT QualifiedCrefSyntax_Container (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT QualifiedCrefSyntax_Member (
	(%structure_MemberCrefSyntax.descendants;)
)>

<!ELEMENT QueryBodySyntax_Clauses (
	(%structure_QueryClauseSyntax.descendants;)
)>

<!ELEMENT QueryBodySyntax_Continuation (
	structure:QueryContinuationSyntax
)>

<!ELEMENT QueryBodySyntax_SelectOrGroup (
	(%structure_SelectOrGroupClauseSyntax.descendants;)
)>

<!ELEMENT QueryContinuationSyntax_Body (
	structure:QueryBodySyntax
)>

<!ELEMENT SelectClauseSyntax_Expression (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT SwitchSectionSyntax_Labels (
	(%structure_SwitchLabelSyntax.descendants;)
)>

<!ELEMENT SwitchSectionSyntax_Statements (
	(%statement_StatementSyntax.descendants;)
)>

<!ELEMENT TypeArgumentListSyntax_Arguments (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT TypeConstraintSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT TypeCrefSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT TypeDeclarationSyntax_ConstraintClauses (
	structure:TypeParameterConstraintClauseSyntax
)>

<!ELEMENT TypeDeclarationSyntax_Members (
	(%structure_MemberDeclarationSyntax.descendants;)
)>

<!ELEMENT TypeDeclarationSyntax_TypeParameterList (
	structure:TypeParameterListSyntax
)>

<!ELEMENT TypeParameterConstraintClauseSyntax_Constraints (
	(%structure_TypeParameterConstraintSyntax.descendants;)
)>

<!ELEMENT TypeParameterConstraintClauseSyntax_Name (
	expression:IdentifierNameSyntax
)>

<!ELEMENT TypeParameterListSyntax_Parameters EMPTY>
<!ATTLIST TypeParameterListSyntax_Parameters
	ref IDREF #REQUIRED
>

<!ELEMENT TypeParameterSyntax_AttributeLists (
	structure:AttributeListSyntax
)>

<!ELEMENT UsingDirectiveSyntax_Alias (
	structure:NameEqualsSyntax
)>

<!ELEMENT UsingDirectiveSyntax_Name (
	(%expression_NameSyntax.descendants;)
)>

<!ELEMENT VariableDeclarationSyntax_Type (
	(%expression_TypeSyntax.descendants;)
)>

<!ELEMENT VariableDeclarationSyntax_Variables (
	structure:VariableDeclaratorSyntax
)>

<!ELEMENT VariableDeclaratorSyntax_ArgumentList (
	structure:BracketedArgumentListSyntax
)>

<!ELEMENT VariableDeclaratorSyntax_Initializer (
	structure:EqualsValueClauseSyntax
)>

<!ELEMENT WhereClauseSyntax_Condition (
	(%expression_ExpressionSyntax.descendants;)
)>

<!ELEMENT XmlAttributeSyntax_Name (
	structure:XmlNameSyntax
)>

<!ELEMENT XmlCrefAttributeSyntax_Cref (
	(%structure_CrefSyntax.descendants;)
)>

<!ELEMENT XmlElementEndTagSyntax_Name (
	structure:XmlNameSyntax
)>

<!ELEMENT XmlElementStartTagSyntax_Attributes (
	(%structure_XmlAttributeSyntax.descendants;)
)>

<!ELEMENT XmlElementStartTagSyntax_Name (
	structure:XmlNameSyntax
)>

<!ELEMENT XmlElementSyntax_Content (
	(%structure_XmlNodeSyntax.descendants;)
)>

<!ELEMENT XmlElementSyntax_EndTag (
	structure:XmlElementEndTagSyntax
)>

<!ELEMENT XmlElementSyntax_StartTag (
	structure:XmlElementStartTagSyntax
)>

<!ELEMENT XmlEmptyElementSyntax_Attributes (
	(%structure_XmlAttributeSyntax.descendants;)
)>

<!ELEMENT XmlEmptyElementSyntax_Name (
	structure:XmlNameSyntax
)>

<!ELEMENT XmlNameAttributeSyntax_Identifier (
	expression:IdentifierNameSyntax
)>

<!ELEMENT XmlNameSyntax_Prefix (
	structure:XmlPrefixSyntax
)>

<!ELEMENT XmlProcessingInstructionSyntax_Name (
	structure:XmlNameSyntax
)>

<!ELEMENT SourcePosition EMPTY>
<!ATTLIST SourcePosition
	name CDATA #IMPLIED
	endColumn CDATA #REQUIRED
	endLine CDATA #REQUIRED
	fileName CDATA #REQUIRED
	startColumn CDATA #REQUIRED
	startLine CDATA #REQUIRED
>

