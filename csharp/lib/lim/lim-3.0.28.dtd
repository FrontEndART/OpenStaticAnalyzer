<!ENTITY % Boolean "(true|false)">

<!ENTITY % AccessibilityKind "(
	ackInternal|
	ackInternalProtected|
	ackNone|
	ackPackagePrivate|
	ackPrivate|
	ackProtected|
	ackProtectedInternal|
	ackPublic
)">

<!ENTITY % AnalysisTimeKind "(
	atkNow|
	atkBefore|
	atkNever
)">

<!ENTITY % ClassKind "(
	clkAnnotation|
	clkClass|
	clkDelegate|
	clkEnum|
	clkInterface|
	clkStruct|
	clkUnion
)">

<!ENTITY % GenericParameterKind "(
	gpkConstraint|
	gpkNonType|
	gpkNonTypePack|
	gpkTemplate|
	gpkTemplatePack|
	gpkType|
	gpkTypePack
)">

<!ENTITY % LanguageKind "(
	lnkNotSet|
	lnkC|
	lnkCpp|
	lnkJava|
	lnkCsharp|
	lnkSql|
	lnkMagic|
	lnkRpg|
	lnkPython|
	lnkJavascript
)">

<!ENTITY % MethodKind "(
	mekAdd|
	mekConstructor|
	mekDestructor|
	mekGet|
	mekMenu|
	mekNormal|
	mekOperator|
	mekRemove|
	mekSet|
	mekSubroutine
)">

<!ENTITY % PackageKind "(
	pkPackage|
	pkModule
)">

<!ENTITY % ParameterKind "(
	pmkIn|
	pmkInOut|
	pmkOut
)">

<!ENTITY % PointerKind "(
	ptkPointer|
	ptkReference
)">

<!ENTITY % RealizationLevel "(
	relDeclares|
	relDefines
)">

<!ENTITY % SimpleTypeKind "(
	stkBoolean|
	stkByte|
	stkCharacter|
	stkDecimal|
	stkDouble|
	stkFloat|
	stkInteger|
	stkLong|
	stkObject|
	stkShort|
	stkSingle|
	stkString|
	stkUnicode|
	stkUnknown|
	stkUnsignedCharacter|
	stkUnsignedInteger|
	stkUnsignedLong|
	stkUnsignedShort|
	stkVoid
)">

<!ENTITY % TypeArgumentConstraintKind "(
	tackLowerBounded|
	tackNone|
	tackUnbounded|
	tackUpperBounded
)">

<!ENTITY % Project.attributes "
	name CDATA #REQUIRED
	xmlns:base CDATA #FIXED 'columbus_lim_schema/base'
	xmlns:logical CDATA #FIXED 'columbus_lim_schema/logical'
	xmlns:physical CDATA #FIXED 'columbus_lim_schema/physical'
	xmlns:type CDATA #FIXED 'columbus_lim_schema/type'
">

<!ENTITY % base_Base.attributes "
	id CDATA #REQUIRED
	parent CDATA #IMPLIED
">

<!ENTITY % base_Comment.attributes "
	text CDATA #REQUIRED
">

<!ENTITY % base_Component.attributes "
	TLLOC CDATA #REQUIRED
	TLOC CDATA #REQUIRED
	analysisTime %AnalysisTimeKind; #REQUIRED
	changesetID CDATA #REQUIRED
	shortName CDATA #REQUIRED
">

<!ENTITY % base_Named.attributes "
	name CDATA #REQUIRED
">

<!ENTITY % logical_AttributeAccess.attributes "
	accesses CDATA #REQUIRED
">

<!ENTITY % logical_Class.attributes "
	classKind %ClassKind; #REQUIRED
	isAbstract %Boolean; #REQUIRED
	objectSize CDATA #REQUIRED
">

<!ENTITY % logical_ClassGenericInstance.attributes "
	isRealInstance %Boolean; #REQUIRED
">

<!ENTITY % logical_Friendship.attributes "
	grants CDATA #REQUIRED
">

<!ENTITY % logical_GenericParameter.attributes "
	genericParameterKind %GenericParameterKind; #REQUIRED
">

<!ENTITY % logical_Member.attributes "
	accessibility %AccessibilityKind; #REQUIRED
	commentLines CDATA #REQUIRED
	demangledName CDATA #REQUIRED
	isCompilerGenerated %Boolean; #REQUIRED
	isStatic %Boolean; #REQUIRED
	language %LanguageKind; #REQUIRED
	mangledName CDATA #REQUIRED
">

<!ENTITY % logical_Method.attributes "
	distinctOperands CDATA #REQUIRED
	distinctOperators CDATA #REQUIRED
	isAbstract %Boolean; #REQUIRED
	isVirtual %Boolean; #REQUIRED
	methodKind %MethodKind; #REQUIRED
	nestingLevel CDATA #REQUIRED
	nestingLevelElseIf CDATA #REQUIRED
	numberOfBranches CDATA #REQUIRED
	numberOfStatements CDATA #REQUIRED
	totalOperands CDATA #REQUIRED
	totalOperators CDATA #REQUIRED
">

<!ENTITY % logical_MethodCall.attributes "
	calls CDATA #REQUIRED
">

<!ENTITY % logical_MethodGenericInstance.attributes "
	isRealInstance %Boolean; #REQUIRED
">

<!ENTITY % logical_Package.attributes "
	packageKind %PackageKind; #REQUIRED
">

<!ENTITY % logical_Parameter.attributes "
	paramKind %ParameterKind; #REQUIRED
">

<!ENTITY % logical_Scope.attributes "
	LLOC CDATA #REQUIRED
	LOC CDATA #REQUIRED
	TLLOC CDATA #REQUIRED
	TLOC CDATA #REQUIRED
	isAnonymous %Boolean; #REQUIRED
">

<!ENTITY % physical_File.attributes "
	CLOC CDATA #REQUIRED
	LLOC CDATA #REQUIRED
	LOC CDATA #REQUIRED
	numberOfBranches CDATA #REQUIRED
">

<!ENTITY % type_SimpleType.attributes "
	simpleTypeKind %SimpleTypeKind; #REQUIRED
">

<!ENTITY % type_Type.attributes "
	refers CDATA #REQUIRED
">

<!ENTITY % type_TypeFormerPointer.attributes "
	pointerKind %PointerKind; #REQUIRED
">

<!ENTITY % base_Component.edges "
	Component_Contains*,
	Component_HasFiles*
">

<!ENTITY % base_ControlFlowBlock.edges "
	ControlFlowBlock_Calls*,
	ControlFlowBlock_Pred*
">

<!ENTITY % base_Named.edges "
	Named_DependsOn*
">

<!ENTITY % logical_Attribute.edges "
	Attribute_Calls*,
	Attribute_HasType*
">

<!ENTITY % logical_AttributeAccess.edges "
	AttributeAccess_Attribute?
">

<!ENTITY % logical_Class.edges "
	Class_GrantsFriendship*,
	Class_IsSubclass*
">

<!ENTITY % logical_ClassGeneric.edges "
	ClassGeneric_HasGenericParameter*
">

<!ENTITY % logical_ClassGenericInstance.edges "
	ClassGenericInstance_HasArguments*
">

<!ENTITY % logical_ClassGenericSpec.edges "
	ClassGenericSpec_HasArguments*,
	ClassGenericSpec_Specialize?
">

<!ENTITY % logical_Friendship.edges "
	Friendship_Friend?
">

<!ENTITY % logical_GenericParameter.edges "
	GenericParameter_HasParameterConstraint*
">

<!ENTITY % logical_Member.edges "
	Member_Aggregated?,
	Member_BelongsTo*,
	Member_CompilationUnit*,
	Member_Declares?,
	Member_HasComment*,
	Member_Instance*,
	Member_IsContainedIn*,
	Member_LanguageVariant?,
	Member_Uses*,
	Member_Variant*
">

<!ENTITY % logical_Method.edges "
	Method_AccessesAttribute*,
	Method_Calls*,
	Method_CanThrow*,
	Method_HasControlFlowBlock*,
	Method_HasParameter*,
	Method_Instantiates*,
	Method_Returns*,
	Method_Throws*
">

<!ENTITY % logical_MethodCall.edges "
	MethodCall_Method?
">

<!ENTITY % logical_MethodGeneric.edges "
	MethodGeneric_HasGenericParameter*
">

<!ENTITY % logical_MethodGenericInstance.edges "
	MethodGenericInstance_HasArguments*
">

<!ENTITY % logical_MethodGenericSpec.edges "
	MethodGenericSpec_HasArguments*,
	MethodGenericSpec_Specialize?
">

<!ENTITY % logical_Parameter.edges "
	Parameter_HasType?
">

<!ENTITY % logical_Scope.edges "
	Scope_HasMember*
">

<!ENTITY % physical_File.edges "
	File_HasComment*,
	File_Includes*
">

<!ENTITY % physical_FileSystem.edges "
	FileSystem_HasFSEntry*
">

<!ENTITY % physical_Folder.edges "
	Folder_Contains*
">

<!ENTITY % type_Type.edges "
	Type_HasTypeFormer*
">

<!ENTITY % type_TypeFormerMethod.edges "
	TypeFormerMethod_HasParameterType*,
	TypeFormerMethod_HasReturnType?
">

<!ENTITY % type_TypeFormerType.edges "
	TypeFormerType_RefersTo?
">

<!ENTITY % logical_ClassGeneric.descendants "
	logical:ClassGeneric|
	logical:ClassGenericSpec
">

<!ENTITY % logical_Class.descendants "
	logical:Class|
	(%logical_ClassGeneric.descendants;)|
	logical:ClassGenericInstance
">

<!ENTITY % logical_MethodGeneric.descendants "
	logical:MethodGeneric|
	logical:MethodGenericSpec
">

<!ENTITY % logical_Method.descendants "
	logical:Method|
	(%logical_MethodGeneric.descendants;)|
	logical:MethodGenericInstance
">

<!ENTITY % logical_Scope.descendants "
	(%logical_Class.descendants;)|
	(%logical_Method.descendants;)|
	logical:Package
">

<!ENTITY % logical_Member.descendants "
	logical:Attribute|
	(%logical_Scope.descendants;)
">

<!ENTITY % physical_FSEntry.descendants "
	physical:File|
	physical:Folder
">

<!ENTITY % base_Named.descendants "
	base:Component|
	logical:GenericParameter|
	(%logical_Member.descendants;)|
	logical:Parameter|
	(%physical_FSEntry.descendants;)|
	physical:FileSystem
">

<!ENTITY % type_TypeFormer.descendants "
	type:TypeFormerArray|
	type:TypeFormerMethod|
	type:TypeFormerNonType|
	type:TypeFormerPointer|
	type:TypeFormerType
">

<!ENTITY % base_Base.descendants "
	base:Comment|
	base:ControlFlowBlock|
	(%base_Named.descendants;)|
	logical:AttributeAccess|
	logical:Friendship|
	logical:MethodCall|
	type:SimpleType|
	type:Type|
	(%type_TypeFormer.descendants;)
">

<!ELEMENT Project (
	logical:Package,
	(
		base:Comment|
		base:Component|
		base:ControlFlowBlock|
		logical:Attribute|
		logical:AttributeAccess|
		logical:Class|
		logical:ClassGeneric|
		logical:ClassGenericInstance|
		logical:ClassGenericSpec|
		logical:Friendship|
		logical:GenericParameter|
		logical:Method|
		logical:MethodCall|
		logical:MethodGeneric|
		logical:MethodGenericInstance|
		logical:MethodGenericSpec|
		logical:Package|
		logical:Parameter|
		physical:File|
		physical:FileSystem|
		physical:Folder|
		type:SimpleType|
		type:Type|
		type:TypeFormerArray|
		type:TypeFormerMethod|
		type:TypeFormerNonType|
		type:TypeFormerPointer|
		type:TypeFormerType
	)*,
	base:Comment*,
	base:Component*,
	logical:AttributeAccess*,
	logical:Friendship*,
	logical:MethodCall*,
	physical:FileSystem*,
	type:SimpleType*,
	type:Type*,
	type:TypeFormerArray*,
	type:TypeFormerMethod*,
	type:TypeFormerNonType*,
	type:TypeFormerPointer*,
	type:TypeFormerType*,
	Filtered?
)>
<!ATTLIST Project %Project.attributes;>

<!ELEMENT Filtered EMPTY>
<!ATTLIST Filtered id ID #REQUIRED>

<!ELEMENT base:Comment EMPTY>
<!ATTLIST base:Comment
	%base_Base.attributes;
	%base_Comment.attributes;
>

<!ELEMENT base:Component (
	%base_Named.edges;,
	%base_Component.edges;
)>
<!ATTLIST base:Component
	%base_Base.attributes;
	%base_Named.attributes;
	%base_Component.attributes;
>

<!ELEMENT base:ControlFlowBlock (
	%base_ControlFlowBlock.edges;
)>
<!ATTLIST base:ControlFlowBlock
	%base_Base.attributes;
>

<!ELEMENT logical:Attribute (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Attribute.edges;
)>
<!ATTLIST logical:Attribute
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
>

<!ELEMENT logical:AttributeAccess (
	%logical_AttributeAccess.edges;
)>
<!ATTLIST logical:AttributeAccess
	%base_Base.attributes;
	%logical_AttributeAccess.attributes;
>

<!ELEMENT logical:Class (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Class.edges;
)>
<!ATTLIST logical:Class
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Class.attributes;
>

<!ELEMENT logical:ClassGeneric (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Class.edges;,
	%logical_ClassGeneric.edges;
)>
<!ATTLIST logical:ClassGeneric
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Class.attributes;
>

<!ELEMENT logical:ClassGenericInstance (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Class.edges;,
	%logical_ClassGenericInstance.edges;
)>
<!ATTLIST logical:ClassGenericInstance
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Class.attributes;
	%logical_ClassGenericInstance.attributes;
>

<!ELEMENT logical:ClassGenericSpec (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Class.edges;,
	%logical_ClassGeneric.edges;,
	%logical_ClassGenericSpec.edges;
)>
<!ATTLIST logical:ClassGenericSpec
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Class.attributes;
>

<!ELEMENT logical:Friendship (
	%logical_Friendship.edges;
)>
<!ATTLIST logical:Friendship
	%base_Base.attributes;
	%logical_Friendship.attributes;
>

<!ELEMENT logical:GenericParameter (
	%base_Named.edges;,
	%logical_GenericParameter.edges;
)>
<!ATTLIST logical:GenericParameter
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_GenericParameter.attributes;
>

<!ELEMENT logical:Method (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Method.edges;
)>
<!ATTLIST logical:Method
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Method.attributes;
>

<!ELEMENT logical:MethodCall (
	%logical_MethodCall.edges;
)>
<!ATTLIST logical:MethodCall
	%base_Base.attributes;
	%logical_MethodCall.attributes;
>

<!ELEMENT logical:MethodGeneric (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Method.edges;,
	%logical_MethodGeneric.edges;
)>
<!ATTLIST logical:MethodGeneric
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Method.attributes;
>

<!ELEMENT logical:MethodGenericInstance (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Method.edges;,
	%logical_MethodGenericInstance.edges;
)>
<!ATTLIST logical:MethodGenericInstance
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Method.attributes;
	%logical_MethodGenericInstance.attributes;
>

<!ELEMENT logical:MethodGenericSpec (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;,
	%logical_Method.edges;,
	%logical_MethodGeneric.edges;,
	%logical_MethodGenericSpec.edges;
)>
<!ATTLIST logical:MethodGenericSpec
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Method.attributes;
>

<!ELEMENT logical:Package (
	%base_Named.edges;,
	%logical_Member.edges;,
	%logical_Scope.edges;
)>
<!ATTLIST logical:Package
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Member.attributes;
	%logical_Scope.attributes;
	%logical_Package.attributes;
>

<!ELEMENT logical:Parameter (
	%base_Named.edges;,
	%logical_Parameter.edges;
)>
<!ATTLIST logical:Parameter
	%base_Base.attributes;
	%base_Named.attributes;
	%logical_Parameter.attributes;
>

<!ELEMENT physical:File (
	%base_Named.edges;,
	%physical_File.edges;
)>
<!ATTLIST physical:File
	%base_Base.attributes;
	%base_Named.attributes;
	%physical_File.attributes;
>

<!ELEMENT physical:FileSystem (
	%base_Named.edges;,
	%physical_FileSystem.edges;
)>
<!ATTLIST physical:FileSystem
	%base_Base.attributes;
	%base_Named.attributes;
>

<!ELEMENT physical:Folder (
	%base_Named.edges;,
	%physical_Folder.edges;
)>
<!ATTLIST physical:Folder
	%base_Base.attributes;
	%base_Named.attributes;
>

<!ELEMENT type:SimpleType EMPTY>
<!ATTLIST type:SimpleType
	%base_Base.attributes;
	%type_SimpleType.attributes;
>

<!ELEMENT type:Type (
	%type_Type.edges;
)>
<!ATTLIST type:Type
	%base_Base.attributes;
	%type_Type.attributes;
>

<!ELEMENT type:TypeFormerArray EMPTY>
<!ATTLIST type:TypeFormerArray
	%base_Base.attributes;
>

<!ELEMENT type:TypeFormerMethod (
	%type_TypeFormerMethod.edges;
)>
<!ATTLIST type:TypeFormerMethod
	%base_Base.attributes;
>

<!ELEMENT type:TypeFormerNonType EMPTY>
<!ATTLIST type:TypeFormerNonType
	%base_Base.attributes;
>

<!ELEMENT type:TypeFormerPointer EMPTY>
<!ATTLIST type:TypeFormerPointer
	%base_Base.attributes;
	%type_TypeFormerPointer.attributes;
>

<!ELEMENT type:TypeFormerType (
	%type_TypeFormerType.edges;
)>
<!ATTLIST type:TypeFormerType
	%base_Base.attributes;
>

<!ELEMENT Component_Contains EMPTY>
<!ATTLIST Component_Contains
	ref IDREF #REQUIRED
>

<!ELEMENT Component_HasFiles EMPTY>
<!ATTLIST Component_HasFiles
	ref IDREF #REQUIRED
>

<!ELEMENT ControlFlowBlock_Calls EMPTY>
<!ATTLIST ControlFlowBlock_Calls
	ref IDREF #REQUIRED
>

<!ELEMENT ControlFlowBlock_Pred EMPTY>
<!ATTLIST ControlFlowBlock_Pred
	ref IDREF #REQUIRED
>

<!ELEMENT Named_DependsOn EMPTY>
<!ATTLIST Named_DependsOn
	ref IDREF #REQUIRED
	value CDATA #REQUIRED
>

<!ELEMENT Attribute_Calls EMPTY>
<!ATTLIST Attribute_Calls
	ref IDREF #REQUIRED
>

<!ELEMENT Attribute_HasType EMPTY>
<!ATTLIST Attribute_HasType
	ref IDREF #REQUIRED
>

<!ELEMENT AttributeAccess_Attribute EMPTY>
<!ATTLIST AttributeAccess_Attribute
	ref IDREF #REQUIRED
>

<!ELEMENT Class_GrantsFriendship EMPTY>
<!ATTLIST Class_GrantsFriendship
	ref IDREF #REQUIRED
>

<!ELEMENT Class_IsSubclass EMPTY>
<!ATTLIST Class_IsSubclass
	ref IDREF #REQUIRED
>

<!ELEMENT ClassGeneric_HasGenericParameter (
	logical:GenericParameter
)>

<!ELEMENT ClassGenericInstance_HasArguments EMPTY>
<!ATTLIST ClassGenericInstance_HasArguments
	ref IDREF #REQUIRED
	value %TypeArgumentConstraintKind; #REQUIRED
>

<!ELEMENT ClassGenericSpec_HasArguments EMPTY>
<!ATTLIST ClassGenericSpec_HasArguments
	ref IDREF #REQUIRED
	value %TypeArgumentConstraintKind; #REQUIRED
>

<!ELEMENT ClassGenericSpec_Specialize EMPTY>
<!ATTLIST ClassGenericSpec_Specialize
	ref IDREF #REQUIRED
>

<!ELEMENT Friendship_Friend EMPTY>
<!ATTLIST Friendship_Friend
	ref IDREF #REQUIRED
>

<!ELEMENT GenericParameter_HasParameterConstraint EMPTY>
<!ATTLIST GenericParameter_HasParameterConstraint
	ref IDREF #REQUIRED
>

<!ELEMENT Member_Aggregated EMPTY>
<!ATTLIST Member_Aggregated
	ref IDREF #REQUIRED
>

<!ELEMENT Member_BelongsTo EMPTY>
<!ATTLIST Member_BelongsTo
	ref IDREF #REQUIRED
>

<!ELEMENT Member_CompilationUnit EMPTY>
<!ATTLIST Member_CompilationUnit
	ref IDREF #REQUIRED
>

<!ELEMENT Member_Declares EMPTY>
<!ATTLIST Member_Declares
	ref IDREF #REQUIRED
>

<!ELEMENT Member_HasComment EMPTY>
<!ATTLIST Member_HasComment
	ref IDREF #REQUIRED
>

<!ELEMENT Member_Instance EMPTY>
<!ATTLIST Member_Instance
	ref IDREF #REQUIRED
>

<!ELEMENT Member_IsContainedIn (
	SourcePosition
)>
<!ATTLIST Member_IsContainedIn
	ref IDREF #REQUIRED
>

<!ELEMENT Member_LanguageVariant EMPTY>
<!ATTLIST Member_LanguageVariant
	ref IDREF #REQUIRED
>

<!ELEMENT Member_Uses EMPTY>
<!ATTLIST Member_Uses
	ref IDREF #REQUIRED
>

<!ELEMENT Member_Variant EMPTY>
<!ATTLIST Member_Variant
	ref IDREF #REQUIRED
>

<!ELEMENT Method_AccessesAttribute EMPTY>
<!ATTLIST Method_AccessesAttribute
	ref IDREF #REQUIRED
>

<!ELEMENT Method_Calls EMPTY>
<!ATTLIST Method_Calls
	ref IDREF #REQUIRED
>

<!ELEMENT Method_CanThrow EMPTY>
<!ATTLIST Method_CanThrow
	ref IDREF #REQUIRED
>

<!ELEMENT Method_HasControlFlowBlock (
	base:ControlFlowBlock
)>

<!ELEMENT Method_HasParameter (
	logical:Parameter
)>

<!ELEMENT Method_Instantiates EMPTY>
<!ATTLIST Method_Instantiates
	ref IDREF #REQUIRED
>

<!ELEMENT Method_Returns EMPTY>
<!ATTLIST Method_Returns
	ref IDREF #REQUIRED
>

<!ELEMENT Method_Throws EMPTY>
<!ATTLIST Method_Throws
	ref IDREF #REQUIRED
>

<!ELEMENT MethodCall_Method EMPTY>
<!ATTLIST MethodCall_Method
	ref IDREF #REQUIRED
>

<!ELEMENT MethodGeneric_HasGenericParameter (
	logical:GenericParameter
)>

<!ELEMENT MethodGenericInstance_HasArguments EMPTY>
<!ATTLIST MethodGenericInstance_HasArguments
	ref IDREF #REQUIRED
	value %TypeArgumentConstraintKind; #REQUIRED
>

<!ELEMENT MethodGenericSpec_HasArguments EMPTY>
<!ATTLIST MethodGenericSpec_HasArguments
	ref IDREF #REQUIRED
	value %TypeArgumentConstraintKind; #REQUIRED
>

<!ELEMENT MethodGenericSpec_Specialize EMPTY>
<!ATTLIST MethodGenericSpec_Specialize
	ref IDREF #REQUIRED
>

<!ELEMENT Parameter_HasType EMPTY>
<!ATTLIST Parameter_HasType
	ref IDREF #REQUIRED
>

<!ELEMENT Scope_HasMember EMPTY>
<!ATTLIST Scope_HasMember
	ref IDREF #REQUIRED
>

<!ELEMENT File_HasComment EMPTY>
<!ATTLIST File_HasComment
	ref IDREF #REQUIRED
>

<!ELEMENT File_Includes EMPTY>
<!ATTLIST File_Includes
	ref IDREF #REQUIRED
>

<!ELEMENT FileSystem_HasFSEntry (
	(%physical_FSEntry.descendants;)
)>

<!ELEMENT Folder_Contains (
	(%physical_FSEntry.descendants;)
)>

<!ELEMENT Type_HasTypeFormer EMPTY>
<!ATTLIST Type_HasTypeFormer
	ref IDREF #REQUIRED
>

<!ELEMENT TypeFormerMethod_HasParameterType EMPTY>
<!ATTLIST TypeFormerMethod_HasParameterType
	ref IDREF #REQUIRED
	value %ParameterKind; #REQUIRED
>

<!ELEMENT TypeFormerMethod_HasReturnType EMPTY>
<!ATTLIST TypeFormerMethod_HasReturnType
	ref IDREF #REQUIRED
>

<!ELEMENT TypeFormerType_RefersTo EMPTY>
<!ATTLIST TypeFormerType_RefersTo
	ref IDREF #REQUIRED
>

<!ELEMENT SourcePosition EMPTY>
<!ATTLIST SourcePosition
	name CDATA #IMPLIED
	realizationLevel %RealizationLevel; #REQUIRED
	line CDATA #REQUIRED
	column CDATA #REQUIRED
	endLine CDATA #REQUIRED
	endColumn CDATA #REQUIRED
>

